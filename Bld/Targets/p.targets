<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <UnifiedPlatform>$(Platform)</UnifiedPlatform>
    <!-- C++ projects use "Win32" for "x86" platform and .NET projects use 'x86' -->
    <!-- So this new property unifies that difference and moves everything to 'x86' -->
    <UnifiedPlatform Condition="'$(Platform)'=='Win32'">x86</UnifiedPlatform>
    <DropFolder>$(MSBuildThisFileDirectory)..\Drops\$(Configuration)\$(UnifiedPlatform)</DropFolder>
    <CleanDependsOn>$(CleanDependsOn);CleanSdkHeaders;CleanClientFiles;CleanCompileP</CleanDependsOn>
    <PGeneratedDir>$(ProjectDir)PGenerated</PGeneratedDir>
    <PCompileOptions>/generate:C0 /shared /outputDir:$(PGeneratedDir)</PCompileOptions>
    <PLinkOptions>/link /outputDir:$(PGeneratedDir)</PLinkOptions>
    <PCompileOptions Condition="'$(PCOMPILE_PROFILE)'=='1'">$(PCompileOptions) /profile</PCompileOptions>
    <PLinkOptions Condition="'$(PCOMPILE_PROFILE)'=='1'">$(PLinkOptions) /profile</PLinkOptions>
  </PropertyGroup>

  <!-- Invoke pc.exe - pc.exe will do the right thing based on which p files (or include files) have actually changed. -->
  <!-- The 'no_build_optimize' hack is a trick to force msbuild to pass all files to pc.exe even if the output files are up to date.
       We need to do this because pc.exe is smarter about tracking the entire include graph which msbuild doesn't know about.
       This is ok because pc.exe is smart about only compiling things that need to based on what has changed.
       The downside is that pc.exe now gets invoked always, so we have to pay that #include graph parsing when have changed
       nothing.  Hopefully the P parser is quick then.  -->  
  <Target Name="CompileP" Inputs="@(PCompile);"
          Outputs="@(PCompile->'$(PGeneratedDir)\%(FileName).4ml');@(PCompile->'$(PGeneratedDir)\%(FileName).c');@(PCompile->'$(PGeneratedDir)\%(FileName).h;no_build_optimize')"
          BeforeTargets="BeforeBuildGenerateSources" >

    <ItemGroup>
      <PLink Include="@(PCompile->'$(PGeneratedDir)\%(FileName).4ml')"/>
      <ClCompile Include="@(PCompile->'$(PGeneratedDir)\%(FileName).c')"/>
    </ItemGroup>

      <ItemGroup>
        <FileWrites Include="@(PCompile->'$(PGeneratedDir)\%(FileName).4ml')" />
        <FileWrites Include="@(PCompile->'$(PGeneratedDir)\%(FileName).c')" />
        <FileWrites Include="@(PCompile->'$(PGeneratedDir)\%(FileName).h')" />
      </ItemGroup>

      <Message Importance="high" Text="########## compiling p files @(PCompile)  ##################" />
      <Exec Command="$(DropFolder)\Binaries\pc.exe $(PCompileOptions) @(PCompile->'%(FullPath)',' ')"/>
      <Message Importance="high" Text="########## compiling p files complete ##################" />

    </Target>

  <Target Name="LinkP" Inputs="@(PLink);" Outputs="$(PGeneratedDir)\linker.c;$(PGeneratedDir)\linker.h"
          DependsOnTargets="CompileP" BeforeTargets="BeforeBuildGenerateSources" >
    <ItemGroup>
      <FileWrites Include="$(PGeneratedDir)\linker.c" />
      <FileWrites Include="$(PGeneratedDir)\linker.h" />
    </ItemGroup>
    
    <!-- must always include linker.c in the final C++ compile -->
    <ItemGroup>
      <ClCompile Include="$(PGeneratedDir)\linker.c"/>
    </ItemGroup>
    
    <Message Importance="high" Text="########## generating p linker.c  ##################" />
    <Exec Command="$(DropFolder)\Binaries\pc.exe $(PLinkOptions) @(PLink->'%(FullPath)',' ')"/>
    <Message Importance="high" Text="########## generating p linker complete ##################" />
  </Target>

  <Target Name="CleanCompileP" Condition="'@(PCompile)' != ''" >   
    <Delete Files="@(PCompile->'$(PGeneratedDir)\%(FileName).c')"/>
    <Delete Files="@(PCompile->'$(PGeneratedDir)\%(FileName).h')"/>
    <Delete Files="@(PCompile->'$(PGeneratedDir)\%(FileName).4ml')"/>
    <Delete Files="$(PGeneratedDir)\linker.c"/>
    <Delete Files="$(PGeneratedDir)\linker.h"/>
  </Target>

  <Target Name="CopySdkHeaders" Inputs="@(ClInclude)"  Outputs="$(DropFolder)\Headers\%(Filename)" BeforeTargets="PrepareForBuild">
    <CreateItem Include="@(ClInclude)" Condition="'%(ClInclude.CopyToHeaders)'=='True'" >
      <Output TaskParameter="Include" ItemName="SdkHeaders"/>
    </CreateItem>
    <Copy SourceFiles="@(SdkHeaders)" DestinationFolder="$(DropFolder)\Headers" />
  </Target>

  <Target Name="CleanSdkHeaders">
    <CreateItem Include="@(ClInclude)" Condition="'%(ClInclude.CopyToHeaders)'=='True'" >
      <Output TaskParameter="Include" ItemName="SdkHeaders"/>
    </CreateItem>
    <Delete Files="@(SdkHeaders->'$(DropFolder)\Headers\%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="CopyClientFiles" Inputs="@(ClientFile)"  Outputs="$(DropFolder)\ClientFiles\%(Filename)" BeforeTargets="PrepareForBuild">
    <Copy SourceFiles="@(ClientFile)" DestinationFolder="$(DropFolder)\ClientFiles" />
  </Target>

  <Target Name="CleanClientFiles">
    <Delete Files="@(ClientFile->'$(DropFolder)\ClientFiles\%(Filename)%(Extension)')" />
  </Target>
</Project>
