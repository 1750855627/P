=================================
         Console output          
=================================
OUT: Writing C:\Projects\Plang\Tst\Tests\Pos\Mutations\output.zing...
OUT: mutations.p (0, 0): inferred type:  NIL
OUT: mutations.p (10, 7): inferred type:  NIL
OUT: mutations.p (10, 7): inferred type:  TupType(BaseType(INT), NIL)
OUT: mutations.p (10, 12): inferred type:  BaseType(INT)
OUT: mutations.p (10, 12): inferred type:  TupType(BaseType(INT), NIL)
OUT: mutations.p (10, 17): inferred type:  TupType(BaseType(INT), NIL)
OUT: mutations.p (11, 7): inferred type:  NIL
OUT: mutations.p (11, 7): inferred type:  NmdTupType(NmdTupTypeField("item1", BaseType(INT)), NmdTupType(NmdTupTypeField("item2", BaseType(BOOL)), NIL))
OUT: mutations.p (11, 13): inferred type:  NmdTupType(NmdTupTypeField("item1", BaseType(INT)), NmdTupType(NmdTupTypeField("item2", BaseType(BOOL)), NIL))
OUT: mutations.p (11, 21): inferred type:  BaseType(INT)
OUT: mutations.p (11, 24): inferred type:  NmdTupType(NmdTupTypeField("item2", BaseType(BOOL)), NIL)
OUT: mutations.p (11, 32): inferred type:  BaseType(BOOL)
OUT: mutations.p (12, 7): inferred type:  NIL
OUT: mutations.p (12, 7): inferred type:  NmdTupType(NmdTupTypeField("item1", BaseType(INT)), NmdTupType(NmdTupTypeField("item2", BaseType(BOOL)), NIL))
OUT: mutations.p (12, 10): inferred type:  BaseType(INT)
OUT: mutations.p (12, 18): inferred type:  BaseType(INT)
OUT: mutations.p (13, 7): inferred type:  NIL
OUT: mutations.p (13, 7): inferred type:  SeqType(BaseType(INT))
OUT: mutations.p (13, 13): inferred type:  BaseType(INT)
OUT: mutations.p (13, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: mutations.p (13, 15): inferred type:  BaseType(INT)
OUT: mutations.p (13, 15): inferred type:  TupType(BaseType(INT), NIL)
OUT: mutations.p (14, 7): inferred type:  NIL
OUT: mutations.p (14, 7): inferred type:  SeqType(BaseType(INT))
OUT: mutations.p (14, 13): inferred type:  BaseType(INT)
OUT: 
EXIT: 0

=================================
output.zing
=================================
enum Machine {_default, _TestMachine};

enum Event {_halt, _x};

enum State {_default, __Init_TestMachine};

enum ActionOrFun {_default, _TestMachine_AnonFun0, _TestMachine_AnonFun1};

class TestMachine{
LocalActions localActions;
SM_EVENT_SET stackActionSet;
SM_EVENT_SET stackDeferredSet;
SM_HANDLE myHandle;
PRT_VALUE s;
PRT_VALUE m;
PRT_VALUE x1;
PRT_VALUE nt;
PRT_VALUE t;
void AnonFun1(Continuation entryCtxt) {
int retTo_1;

dummy:
retTo_1 = entryCtxt.PopReturnTo();
if ((retTo_1 == 0)) {
goto start;
}
assert(false);

start:

;
entryCtxt.Return();
return;

;

}
void AnonFun0(Continuation entryCtxt) {
PRT_VALUE tmp_0;
PRT_VALUE tmpTuple_0;
PRT_VALUE tmpVar_0;
PRT_VALUE tmp_1;
PRT_VALUE tmp_2;
PRT_VALUE tmpTuple_1;
PRT_VALUE tmp_3;
PRT_VALUE tmp_4;
PRT_VALUE tmp_5;
PRT_VALUE tmpTuple_2;
PRT_VALUE idx_0;
PRT_VALUE val_0;
PRT_VALUE tmp_6;
int retTo_0;

dummy:
retTo_0 = entryCtxt.PopReturnTo();
if ((retTo_0 == 0)) {
goto start;
}
assert(false);

start:
tmp_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_0, 1);
tmpTuple_0 = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_0, 0, tmp_0);
tmpVar_0 = PRT_VALUE.PrtCastValue(tmpTuple_0, Main.type_2_PRT_TYPE);
t = PRT_VALUE.PrtCloneValue(tmpVar_0);
tmp_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_1, 1);
tmp_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_3_PRT_TYPE);
PRT_VALUE.PrtPrimSetBool(tmp_2, false);
tmpTuple_1 = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_1, 0, tmp_1);
PRT_VALUE.PrtTupleSet(tmpTuple_1, 1, tmp_2);
nt = PRT_VALUE.PrtCloneValue(tmpTuple_1);
tmp_3 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_3, 100);
PRT_VALUE.PrtTupleSet(nt, 0, tmp_3);
tmp_4 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_4, 1);
tmp_5 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_5, 100);
tmpTuple_2 = PRT_VALUE.PrtMkDefaultValue(Main.type_5_PRT_TYPE);
PRT_VALUE.PrtTupleSet(tmpTuple_2, 0, tmp_4);
PRT_VALUE.PrtTupleSet(tmpTuple_2, 1, tmp_5);
idx_0 = PRT_VALUE.PrtTupleGet(tmpTuple_2, 0);
val_0 = PRT_VALUE.PrtTupleGet(tmpTuple_2, 1);
PRT_VALUE.PrtSeqInsert(s, idx_0, val_0);
tmp_6 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
PRT_VALUE.PrtPrimSetInt(tmp_6, 0);
PRT_VALUE.PrtSeqRemove(s, tmp_6);

;
entryCtxt.Return();
return;

;

}
void ReentrancyHelper(Continuation cont, ActionOrFun actionFun, SM_EVENT_SET currentActionSet) {
SM_EVENT_SET savedDeferredSet;
SM_EVENT_SET savedActionSet;
SM_EVENT savedCurrentEvent;
PRT_VALUE savedCurrentArg;

init:
if ((actionFun == ActionOrFun._TestMachine_AnonFun0)) {
goto execute_AnonFun0;
}
if ((actionFun == ActionOrFun._TestMachine_AnonFun1)) {
goto execute_AnonFun1;
}
assert(false);

;


execute_AnonFun0:

reentry_AnonFun0:
AnonFun0(cont);

;
if ((cont.reason == ContinuationReason.Return)) {
return;

}
if ((cont.reason == ContinuationReason.Pop)) {
return;

}
if ((cont.reason == ContinuationReason.Raise)) {
return;

}
if ((cont.reason == ContinuationReason.Call)) {
savedDeferredSet = stackDeferredSet;
savedActionSet = stackActionSet;
savedCurrentEvent = myHandle.currentEvent;
savedCurrentArg = myHandle.currentArg;
stackActionSet = currentActionSet;
stackDeferredSet = Main.CalculateComplementOfEventSet(currentActionSet);
myHandle.currentEvent = null;
myHandle.currentArg = null;
localActions = LocalActions.Construct(localActions);
RunHelper(cont.state);
localActions = localActions.next;
stackDeferredSet = savedDeferredSet;
stackActionSet = savedActionSet;
cont.state = State._default;
if ((myHandle.currentEvent == null)) {
myHandle.currentEvent = savedCurrentEvent;
myHandle.currentArg = savedCurrentArg;

} else {
trace("<StateLog> Call statement terminated due to unhandled event by machine TestMachine-{0}\n", myHandle.instance);
assert(false);

}
goto reentry_AnonFun0;
}
if ((cont.reason == ContinuationReason.Nondet)) {
cont.nondet = choose(bool);
goto reentry_AnonFun0;
}
if ((cont.reason == ContinuationReason.NewMachine)) {
yield;
goto reentry_AnonFun0;
}
if ((cont.reason == ContinuationReason.Send)) {
yield;
goto reentry_AnonFun0;
}

;


execute_AnonFun1:

reentry_AnonFun1:
AnonFun1(cont);

;
if ((cont.reason == ContinuationReason.Return)) {
return;

}
if ((cont.reason == ContinuationReason.Pop)) {
return;

}
if ((cont.reason == ContinuationReason.Raise)) {
return;

}
if ((cont.reason == ContinuationReason.Call)) {
savedDeferredSet = stackDeferredSet;
savedActionSet = stackActionSet;
savedCurrentEvent = myHandle.currentEvent;
savedCurrentArg = myHandle.currentArg;
stackActionSet = currentActionSet;
stackDeferredSet = Main.CalculateComplementOfEventSet(currentActionSet);
myHandle.currentEvent = null;
myHandle.currentArg = null;
localActions = LocalActions.Construct(localActions);
RunHelper(cont.state);
localActions = localActions.next;
stackDeferredSet = savedDeferredSet;
stackActionSet = savedActionSet;
cont.state = State._default;
if ((myHandle.currentEvent == null)) {
myHandle.currentEvent = savedCurrentEvent;
myHandle.currentArg = savedCurrentArg;

} else {
trace("<StateLog> Call statement terminated due to unhandled event by machine TestMachine-{0}\n", myHandle.instance);
assert(false);

}
goto reentry_AnonFun1;
}
if ((cont.reason == ContinuationReason.Nondet)) {
cont.nondet = choose(bool);
goto reentry_AnonFun1;
}
if ((cont.reason == ContinuationReason.NewMachine)) {
yield;
goto reentry_AnonFun1;
}
if ((cont.reason == ContinuationReason.Send)) {
yield;
goto reentry_AnonFun1;
}

;

}
void RunHelper(State startState) {
SM_EVENT_SET currentDeferredSet;
SM_EVENT_SET currentActionSet;
SM_EVENT_SET savedDeferredSet;
SM_EVENT_SET savedActionSet;
ActionOrFun actionFun;
Continuation cont;
SM_EVENT savedCurrentEvent;
PRT_VALUE savedCurrentArg;

init:
if ((startState == State.__Init_TestMachine)) {
goto execute__Init_TestMachine;
} else {
assert(false);

}

;


execute__Init_TestMachine:
trace("<StateLog> Machine TestMachine-{0} entered State Init\n", myHandle.instance);
invokeplugin("StateCoveragePlugin.dll", "TestMachine", "_Init_TestMachine");
currentDeferredSet = new SM_EVENT_SET;
currentActionSet = new SM_EVENT_SET;
_Init_TestMachine_CalculateDeferredAndActionSet(currentDeferredSet, currentActionSet);
cont = Continuation.Construct_Default();
cont.PushReturnTo(0);
ReentrancyHelper(cont, ActionOrFun._TestMachine_AnonFun0, currentActionSet);
if ((cont.reason == ContinuationReason.Pop)) {
return;

} else {
if ((cont.reason == ContinuationReason.Return)) {
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);

}

}
if ((myHandle.currentEvent == null)) {
goto wait__Init_TestMachine;
} else {
goto transition__Init_TestMachine;
}

;


wait__Init_TestMachine:
myHandle.DequeueEvent(false, currentDeferredSet);
goto transition__Init_TestMachine;
;


transition__Init_TestMachine:
if (myHandle.currentEvent in currentActionSet) {
actionFun = localActions.Find(myHandle.currentEvent);
cont = Continuation.Construct_Default();
cont.PushReturnTo(0);
ReentrancyHelper(cont, actionFun, currentActionSet);
if ((cont.reason == ContinuationReason.Pop)) {
return;

} else {
if ((cont.reason == ContinuationReason.Return)) {
myHandle.currentEvent = null;
myHandle.currentArg = PRT_VALUE.PrtMkDefaultValue(Main.type_0_PRT_TYPE);

}

}
if ((myHandle.currentEvent == null)) {
goto wait__Init_TestMachine;
} else {
goto transition__Init_TestMachine;
}

}
trace("<StateLog> Machine TestMachine-{0} exiting State Init\n", myHandle.instance);
cont = Continuation.Construct_Default();
cont.PushReturnTo(0);
ReentrancyHelper(cont, ActionOrFun._TestMachine_AnonFun1, currentActionSet);
return;

;

}
void run() {
SM_EVENT_SET currentDeferredSet;

dummy:
RunHelper(State.__Init_TestMachine);
if ((myHandle.currentEvent == Main.halt_SM_EVENT)) {
currentDeferredSet = null;
myHandle.buffer = null;
myHandle.isDeleted = true;
localActions = null;
stackActionSet = null;
stackDeferredSet = null;
return;

}
trace("<StateLog> Unhandled event exception by machine TestMachine-{0}\n", myHandle.instance);
assert(false);

;

}
void _Init_TestMachine_CalculateDeferredAndActionSet(SM_EVENT_SET currentDeferredSet, SM_EVENT_SET currentActionSet) {

dummy:
currentDeferredSet = (currentDeferredSet + stackDeferredSet);
currentActionSet = (currentActionSet + stackActionSet);
localActions.es = new SM_EVENT_array[0];
localActions.as = new ActionOrFun_array[0];

;

}
};

class Main{
static PRT_TYPE type_7_PRT_TYPE;
static PRT_TYPE type_6_PRT_TYPE;
static PRT_TYPE type_5_PRT_TYPE;
static PRT_TYPE type_4_PRT_TYPE;
static PRT_TYPE type_3_PRT_TYPE;
static PRT_TYPE type_2_PRT_TYPE;
static PRT_TYPE type_1_PRT_TYPE;
static PRT_TYPE type_0_PRT_TYPE;
static PRT_FIELD_NAME field_1_PRT_FIELD_NAME;
static PRT_FIELD_NAME field_0_PRT_FIELD_NAME;
static int TestMachine_instance;
static SM_EVENT x_SM_EVENT;
static SM_EVENT null_SM_EVENT;
static SM_EVENT halt_SM_EVENT;
static activate void run() {

dummy:
Main.halt_SM_EVENT = SM_EVENT.Construct(Event._halt, 1, false);
Main.null_SM_EVENT = null;
Main.x_SM_EVENT = SM_EVENT.Construct(Event._x, -1, false);
TestMachine_instance = 0;
Main.type_0_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
Main.type_1_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_INT);
Main.type_2_PRT_TYPE = PRT_TYPE.PrtMkTupType(1);
PRT_TYPE.PrtSetFieldType(Main.type_2_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
Main.type_3_PRT_TYPE = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_BOOL);
Main.type_4_PRT_TYPE = PRT_TYPE.PrtMkNmdTupType(2);
Main.field_0_PRT_FIELD_NAME = new PRT_FIELD_NAME;
PRT_TYPE.PrtSetFieldName(Main.type_4_PRT_TYPE, 0, Main.field_0_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_4_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
Main.field_1_PRT_FIELD_NAME = new PRT_FIELD_NAME;
PRT_TYPE.PrtSetFieldName(Main.type_4_PRT_TYPE, 1, Main.field_1_PRT_FIELD_NAME);
PRT_TYPE.PrtSetFieldType(Main.type_4_PRT_TYPE, 1, Main.type_3_PRT_TYPE);
Main.type_5_PRT_TYPE = PRT_TYPE.PrtMkTupType(2);
PRT_TYPE.PrtSetFieldType(Main.type_5_PRT_TYPE, 0, Main.type_1_PRT_TYPE);
PRT_TYPE.PrtSetFieldType(Main.type_5_PRT_TYPE, 1, Main.type_1_PRT_TYPE);
Main.type_6_PRT_TYPE = PRT_TYPE.PrtMkSeqType(Main.type_1_PRT_TYPE);
Main.type_7_PRT_TYPE = PRT_TYPE.PrtMkMapType(Main.type_1_PRT_TYPE, Main.type_1_PRT_TYPE);
Main.CreateMachine_TestMachine(null);

;

}
static PRT_TYPE PayloadOf(SM_EVENT e) {

dummy:
if ((e == null)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._halt)) {
return Main.type_0_PRT_TYPE;

}
if ((e.name == Event._x)) {
return Main.type_0_PRT_TYPE;

}
assert(false);

;

}
static SM_EVENT_SET CalculateComplementOfEventSet(SM_EVENT_SET eventSet) {
SM_EVENT_SET returnEventSet;

dummy:
returnEventSet = new SM_EVENT_SET;
if (Main.null_SM_EVENT in eventSet) {

} else {
returnEventSet = (returnEventSet + Main.null_SM_EVENT);

}
if (Main.x_SM_EVENT in eventSet) {

} else {
returnEventSet = (returnEventSet + Main.x_SM_EVENT);

}
return returnEventSet;

;

}
static SM_HANDLE CreateMachine_TestMachine(PRT_VALUE arg) {
FairChoice fairChoice;
FairScheduler fairScheduler;
TestMachine o_TestMachine;

dummy:
o_TestMachine = new TestMachine;
o_TestMachine.s = PRT_VALUE.PrtMkDefaultValue(Main.type_6_PRT_TYPE);
o_TestMachine.m = PRT_VALUE.PrtMkDefaultValue(Main.type_7_PRT_TYPE);
o_TestMachine.x1 = PRT_VALUE.PrtMkDefaultValue(Main.type_1_PRT_TYPE);
o_TestMachine.nt = PRT_VALUE.PrtMkDefaultValue(Main.type_4_PRT_TYPE);
o_TestMachine.t = PRT_VALUE.PrtMkDefaultValue(Main.type_2_PRT_TYPE);
o_TestMachine.myHandle = SM_HANDLE.Construct(Machine._TestMachine, TestMachine_instance, -1);
trace("<CreateLog> Created Machine TestMachine-{0}\n", TestMachine_instance);
o_TestMachine.myHandle.currentArg = arg;
TestMachine_instance = (TestMachine_instance + 1);
o_TestMachine.stackDeferredSet = new SM_EVENT_SET;
o_TestMachine.stackActionSet = new SM_EVENT_SET;
o_TestMachine.localActions = LocalActions.Construct(null);
o_TestMachine.myHandle.machineId = MachineId.GetNextId();
async o_TestMachine.run();
invokescheduler("map", o_TestMachine.myHandle.machineId);
return o_TestMachine.myHandle;

;

}
};

