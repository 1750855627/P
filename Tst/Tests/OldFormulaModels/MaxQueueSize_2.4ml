[
	parsers.DSL = '"Parser at ..\Tools\PCompiler\DSLParser.dll"',
	modules.PData = '"PData at ..\Libraries\Formula\PData.4ml"',
	parse_ActiveParser = "DSL"
]


//////
// Description : MaxQueueSize_2 with
// two machines ghost and real.
// Test the functioning of Maxqueuesize
//
/////  
model MaxQueueSize_2 of PData
{
   ///////////////////////////////////////////////
   ///////        Foreign Functions       ////////
   ///////////////////////////////////////////////

   ///////////////////////////////////////////////
   ///////        Event Alphabet          ////////
   ///////////////////////////////////////////////
	eE1 is EventDecl("E1", AssertMaxInstances(1), NIL).
	eE2 is EventDecl("E2", NIL, INT).
	eE3 is EventDecl("E3", AssumeMaxInstances(2), NIL).
	eE4 is EventDecl("E4", NIL, NIL).
	eUnit is EventDecl("unit", AssertMaxInstances(1), NIL).

   ///////////////////////////////////////////////
   ///////    Declartions of Machines     ////////
   ///////////////////////////////////////////////
     
   mReal is MachineDecl("Real", FALSE, 31).
   MachStart(mReal, sReal_Init).

   mGhost is MachineDecl("Ghost", TRUE, NIL).
   MachStart(mGhost, sGhost_Init).

    ///////////////////////////////////////////////
   ///////         Var Declarations        ////////
   ///////////////////////////////////////////////
 
   VarDecl("ghost", mReal, ID, TRUE).  
   VarDecl("test", mReal, BOOL, FALSE).  
   VarDecl("real", mGhost, ID, FALSE).
   VarDecl("counter", mGhost, INT, FALSE).
   ///////////////////////////////////////////////
   ///////  Real States and Transitions   ////////
   ///////////////////////////////////////////////
   es1 is EventSetDecl("es1", mReal).
   InEventSet(es1, eE2).
   
   
   sReal_Init is StateDecl(     
       "Real_Init",
       mReal,
       `{
	       ghost = new Ghost(real = this);  
		   raise(Events.unit);	   
       }`,
       NIL).                   

   mReal_Action is ActionDecl("Action_1", mReal, `{ assert(Arg.INT == 100); send(ghost, Events.E3); send(ghost, Events.E3);}`). //// Send inside an action

   Install(sReal_Init, eE2, mReal_Action). 

   ExitFun(sReal_Init, `{test = true;}`).  // A state has both Action and Exit function together

   sReal_S1 is StateDecl(
       "Real_S1",
	   mReal,
	   `{
          send(ghost, Events.E1);
	      
	   }`,
	   es1).


   sReal_S2 is StateDecl(
       "Real_S2",
	   mReal,
	   `{
           raise(Events.unit);
	   }`,
	   NIL). 

   sReal_S3 is StateDecl(
		"Real_S3",
		mReal,
		`{
          
	   }`,
	   NIL).
   TransDecl(sReal_Init, eUnit, sReal_S1, TRUE).
   TransDecl(sReal_Init, eE4, sReal_S2, FALSE).
   TransDecl(sReal_S2, eUnit, sReal_S3, FALSE). 
   TransDecl(sReal_S3, eE4, sReal_S3, FALSE).
   ///////////////////////////////////////////////
   ///////  ghost States and Transitions   ////////
   ///////////////////////////////////////////////
     
   sGhost_Init is StateDecl(
       "Ghost_Init",
	   mGhost,
	   `{
	   counter = 0;
	   }`,
	   NIL).

  sGhost_S1 is StateDecl(
      "Ghost_S1",
	  mGhost,
	  `{
         while(counter < 32)
		 {
			send (real, Events.E2, counter);
			counter = counter + 1;
		 }
	  }`,
	  NIL). 
  
  mGhost_Action is ActionDecl("Action_2", mGhost, `{}`). //// Send inside an action

  Install(sGhost_S1, eE1, mGhost_Action). 
  
  sGhost_S2 is StateDecl(
      "Ghost_S2",
	  mGhost,
	  `{
		 send (real, Events.E4);
		 send (real, Events.E4);
		 send (real, Events.E4);
	  }`,
	  NIL). 
	  
   TransDecl(sGhost_Init, eE1, sGhost_S1, FALSE).
   TransDecl(sGhost_S1, eE3, sGhost_S2, FALSE).
   TransDecl(sGhost_S2, eE3, sGhost_Init, FALSE).
   MainDecl(New(MachType("Real"), NIL)).
}
