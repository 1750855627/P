[
	parsers.DSL = '"Parser at ..\Tools\PCompiler\DSLParser.dll"',
	modules.PData = '"PData at ..\Libraries\Formula\PData.4ml"',
	parse_ActiveParser = "DSL"
]

model Elevator of PData
{
   eOpenDoor is EventDecl("OpenDoor", AssumeMaxInstances(1), NIL).
   eCloseDoor is EventDecl("CloseDoor", AssumeMaxInstances(1), NIL).
   eResetDoor is EventDecl("ResetDoor", AssertMaxInstances(1), NIL).

   eDoorOpened is EventDecl("DoorOpened", AssertMaxInstances(1), NIL).
   eDoorClosed is EventDecl("DoorClosed", AssertMaxInstances(1), NIL).
   eDoorStopped is EventDecl("DoorStopped", AssertMaxInstances(1), NIL).
   eObjectDetected is EventDecl("ObjectDetected", AssertMaxInstances(1), NIL).
   eTimerFired is EventDecl("TimerFired", AssumeMaxInstances(1), NIL).   
   eOperationSuccess is EventDecl("OperationSuccess", AssertMaxInstances(1), NIL).
   eOperationFailure is EventDecl("OperationFailure", AssertMaxInstances(1), NIL).
   eSendCommandToOpenDoor is EventDecl("SendCommandToOpenDoor", AssumeMaxInstances(1), NIL).
   eSendCommandToCloseDoor is EventDecl("SendCommandToCloseDoor", AssumeMaxInstances(1), NIL).
   eSendCommandToStopDoor is EventDecl("SendCommandToStopDoor", AssumeMaxInstances(1), NIL).
   eSendCommandToResetDoor is EventDecl("SendCommandToResetDoor", AssumeMaxInstances(1), NIL).
   eStartDoorCloseTimer is EventDecl("StartDoorCloseTimer", AssumeMaxInstances(1), NIL).
   eStopDoorCloseTimer is EventDecl("StopDoorCloseTimer", AssumeMaxInstances(1), NIL).

   eunit is EventDecl("unit", AssertMaxInstances(1), NIL).
   eStopTimerReturned is EventDecl("StopTimerReturned", AssertMaxInstances(1), NIL).
   eObjectEncountered is EventDecl("ObjectEncountered", AssertMaxInstances(1), NIL).

   mElevator is MachineDecl("Elevator", FALSE, NIL).
   VarDecl("Timer", mElevator, ID, TRUE).
   VarDecl("Door", mElevator, ID, TRUE).

   es1_Elevator is EventSetDecl("es1", mElevator).
   InEventSet(es1_Elevator, eOpenDoor).

   es2_Elevator is EventSetDecl("es2", mElevator).
   InEventSet(es2_Elevator, eCloseDoor).

   es3_Elevator is EventSetDecl("es3", mElevator).
   InEventSet(es3_Elevator, eOpenDoor).
   InEventSet(es3_Elevator, eCloseDoor).
   InEventSet(es3_Elevator, eObjectDetected).

   es4_Elevator is EventSetDecl("es4", mElevator).
   InEventSet(es4_Elevator, eOpenDoor).
   InEventSet(es4_Elevator, eObjectDetected).
   InEventSet(es4_Elevator, eDoorClosed).

   mElevator_Ignore is ActionDecl("Ignore", mElevator, `{ }`).
   MachStart(mElevator, sInit_Elevator).

   sInit_Elevator is StateDecl("Init", mElevator, 
		  `{
			Timer = new Timer(Elevator = THIS);
			Door = new Door(Elevator = THIS);
			raise(Events.unit);
		  }`,
		  NIL).

   sDoorClosed_Elevator is StateDecl("DoorClosed", mElevator,
		  `{ send(Door, Events.SendCommandToResetDoor); }`,
		  NIL).
   Install(sDoorClosed_Elevator, eCloseDoor, mElevator_Ignore).
   
   sDoorOpening_Elevator is StateDecl("DoorOpening", mElevator,
			 `{ send(Door, Events.SendCommandToOpenDoor); }`,
			 es2_Elevator).
   Install(sDoorOpening_Elevator, eOpenDoor, mElevator_Ignore).
	
   sDoorOpened_Elevator is StateDecl("DoorOpened", mElevator,
			`{
				send(Door, Events.SendCommandToResetDoor);
				send(Timer, Events.StartDoorCloseTimer);
			}`,
			es2_Elevator).

  sDoorOpenedOkToClose_Elevator is StateDecl("DoorOpenedOkToClose", mElevator, 
			`{
				send(Timer, Events.StartDoorCloseTimer);
			}`, 
			es1_Elevator).

  sDoorClosing_Elevator is StateDecl("DoorClosing", mElevator, 
				`{
				send(Door, Events.SendCommandToCloseDoor);
			}`, 
			es2_Elevator).

  sStoppingDoor_Elevator is StateDecl("StoppingDoor", mElevator, 
			 `{
				send(Door, Events.SendCommandToStopDoor);
			 }`, 
			 es2_Elevator).
  Install(sStoppingDoor_Elevator, eOpenDoor, mElevator_Ignore).
  Install(sStoppingDoor_Elevator, eDoorClosed, mElevator_Ignore).
  Install(sStoppingDoor_Elevator, eObjectDetected, mElevator_Ignore).
  
  sStoppingTimer_Elevator is StateDecl("StoppingTimer", mElevator, 
			  `{
				send(Timer, Events.StopDoorCloseTimer);
			  }`, 
			  es3_Elevator).

  sWaitingForTimer_Elevator is StateDecl("WaitingForTimer", mElevator, `{ }`, es3_Elevator).

  sReturnState_Elevator is StateDecl("ReturnState", mElevator, 
			`{
				raise(Events.StopTimerReturned);
			}`, 
			NIL).

  TransDecl(sInit_Elevator, eunit, sDoorClosed_Elevator, FALSE).
  TransDecl(sDoorClosed_Elevator, eOpenDoor, sDoorOpening_Elevator, FALSE).
  TransDecl(sDoorOpening_Elevator, eDoorOpened, sDoorOpened_Elevator, FALSE).
  TransDecl(sDoorOpened_Elevator, eTimerFired, sDoorOpenedOkToClose_Elevator, FALSE).
  TransDecl(sDoorOpened_Elevator, eStopTimerReturned, sDoorOpened_Elevator, FALSE).
  TransDecl(sDoorOpenedOkToClose_Elevator, eStopTimerReturned, sDoorClosing_Elevator, FALSE).
  TransDecl(sDoorOpenedOkToClose_Elevator, eTimerFired, sDoorClosing_Elevator, FALSE).
  TransDecl(sDoorClosing_Elevator, eOpenDoor, sStoppingDoor_Elevator, FALSE).
  TransDecl(sDoorClosing_Elevator, eDoorClosed, sDoorClosed_Elevator, FALSE).
  TransDecl(sDoorClosing_Elevator, eObjectDetected, sDoorOpening_Elevator, FALSE).
  TransDecl(sStoppingDoor_Elevator, eDoorOpened, sDoorOpened_Elevator, FALSE).
  TransDecl(sStoppingDoor_Elevator, eDoorClosed, sDoorClosed_Elevator, FALSE).
  TransDecl(sStoppingDoor_Elevator, eDoorStopped, sDoorOpening_Elevator, FALSE).
  TransDecl(sStoppingTimer_Elevator, eOperationSuccess, sReturnState_Elevator, FALSE).
  TransDecl(sStoppingTimer_Elevator, eOperationFailure, sWaitingForTimer_Elevator, FALSE).
  TransDecl(sWaitingForTimer_Elevator, eTimerFired, sReturnState_Elevator, FALSE).
  TransDecl(sDoorOpened_Elevator, eOpenDoor, sStoppingTimer_Elevator, TRUE).
  TransDecl(sDoorOpenedOkToClose_Elevator, eCloseDoor, sStoppingTimer_Elevator, TRUE).

  mUser is MachineDecl("User", TRUE, NIL).
  VarDecl("Elevator", mUser, ID, FALSE).
  MachStart(mUser, sInit_User).

  sInit_User is StateDecl("Init", mUser, `{ Elevator = new Elevator(); raise(Events.unit); }`, NIL).

  sLoop_User is StateDecl("Loop", mUser, 
			`{
			if (NONDET) { 
			   send(Elevator, Events.OpenDoor); 
			} else if (NONDET) {
			   send(Elevator, Events.CloseDoor);
			}
			raise(Events.unit);
			}`,
			NIL).

  TransDecl(sInit_User, eunit, sLoop_User, FALSE).
  TransDecl(sLoop_User, eunit, sLoop_User, FALSE).

  mDoor is MachineDecl("Door", TRUE, NIL).
  VarDecl("Elevator", mDoor, ID, FALSE).
  mDoor_Ignore is ActionDecl("Ignore", mDoor, `{ }`).
  
  MachStart(mDoor, sInit_Door).

  sInit_Door is StateDecl("Init", mDoor, `{ }`, NIL).
  Install(sInit_Door, eSendCommandToStopDoor, mDoor_Ignore).
  Install(sInit_Door, eSendCommandToResetDoor, mDoor_Ignore).
  Install(sInit_Door, eResetDoor, mDoor_Ignore).
  
  sOpenDoor_Door is StateDecl("OpenDoor", mDoor, `{ send(Elevator, Events.DoorOpened); raise(Events.unit); }`, NIL).

  sConsiderClosingDoor_Door is StateDecl("ConsiderClosingDoor", mDoor,
				`{ 
				   if (NONDET) {
					  raise(Events.unit);
				   } else if (NONDET) {
					  raise(Events.ObjectEncountered);
				   }
				  }`,
				  NIL).

  sObjectEncountered_Door is StateDecl("ObjectEncontered", mDoor, 
				 `{
				 send(Elevator, Events.ObjectDetected);
				 raise(Events.unit);
				  }`,
				  NIL).

  sCloseDoor_Door is StateDecl("CloseDoor", mDoor, `{ send(Elevator, Events.DoorClosed); raise(Events.unit); }`, NIL).

  sStopDoor_Door is StateDecl("StopDoor", mDoor, `{ send(Elevator, Events.DoorStopped); raise(Events.unit); }`, NIL).

  sReset_Door is StateDecl("Reset", mDoor, `{ }`, NIL).
  Install(sReset_Door, eSendCommandToOpenDoor, mDoor_Ignore).
  Install(sReset_Door, eSendCommandToCloseDoor, mDoor_Ignore).
  Install(sReset_Door, eSendCommandToStopDoor, mDoor_Ignore).
  
  TransDecl(sInit_Door, eSendCommandToOpenDoor, sOpenDoor_Door, FALSE).
  TransDecl(sOpenDoor_Door, eunit, sReset_Door, FALSE).
  TransDecl(sInit_Door, eSendCommandToCloseDoor, sConsiderClosingDoor_Door, FALSE).
  TransDecl(sConsiderClosingDoor_Door, eunit, sCloseDoor_Door, FALSE).
  TransDecl(sConsiderClosingDoor_Door, eObjectEncountered, sObjectEncountered_Door, FALSE).
  TransDecl(sCloseDoor_Door, eunit, sReset_Door, FALSE).
  TransDecl(sConsiderClosingDoor_Door, eSendCommandToStopDoor, sStopDoor_Door, FALSE).
  TransDecl(sStopDoor_Door, eunit, sOpenDoor_Door, FALSE).
  TransDecl(sObjectEncountered_Door, eunit, sInit_Door, FALSE).
  TransDecl(sReset_Door, eSendCommandToResetDoor, sInit_Door, FALSE).

  mTimer is MachineDecl("Timer", TRUE, NIL).
  VarDecl("Elevator", mTimer, ID, FALSE).
  es1_Timer is EventSetDecl("es1", mTimer).
  es2_Timer is EventSetDecl("es2", mTimer).
  InEventSet(es1_Timer, eStartDoorCloseTimer).
  InEventSet(es2_Timer, eStopDoorCloseTimer).
  
  mTimer_Ignore is ActionDecl("Ignore", mTimer, `{ }`).
  MachStart(mTimer, sInit_Timer).

  sInit_Timer is StateDecl("Init", mTimer, `{ }`, NIL).
  Install(sInit_Timer, eStopDoorCloseTimer, mTimer_Ignore).
  
  sTimerStarted_Timer is StateDecl("TimerStarted", mTimer, `{ if (NONDET) { raise(Events.unit); } }`, es1_Timer).

  sSendTimerFired_Timer is StateDecl("SendTimerFired", mTimer, `{ send(Elevator, Events.TimerFired); raise(Events.unit); }`, es1_Timer).

  sConsiderStopping_Timer is StateDecl("ConsiderStopping", mTimer, 
				`{
					if (NONDET) {
						  send(Elevator, Events.OperationFailure);
						  send(Elevator, Events.TimerFired);
					} else {
						  send(Elevator, Events.OperationSuccess);
					}
					raise(Events.unit);
				}`, 
				es1_Timer).

  TransDecl(sInit_Timer, eStartDoorCloseTimer, sTimerStarted_Timer, FALSE).
  TransDecl(sTimerStarted_Timer, eunit, sSendTimerFired_Timer, FALSE).
  TransDecl(sSendTimerFired_Timer, eunit, sInit_Timer, FALSE).
  TransDecl(sTimerStarted_Timer, eStopDoorCloseTimer, sConsiderStopping_Timer, FALSE).
  TransDecl(sConsiderStopping_Timer, eunit, sInit_Timer, FALSE).

  MainDecl(New(MachType("User"), NIL)).
}