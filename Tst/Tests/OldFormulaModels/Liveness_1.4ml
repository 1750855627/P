[
	parsers.DSL = '"Parser at ..\Tools\PCompiler\DSLParser.dll"',
	modules.PData = '"PData at ..\Libraries\Formula\PData.4ml"',
	parse_ActiveParser = "DSL"
]


//////
// Description : Liveness bug because one machine keeps looping
//
/////  
model Liveness_1 of PData
{
   ///////////////////////////////////////////////
   ///////        Foreign Functions       ////////
   ///////////////////////////////////////////////

   ///////////////////////////////////////////////
   ///////        Event Alphabet          ////////
   ///////////////////////////////////////////////
eE1 is EventDecl("E1", AssertMaxInstances(1), NIL).
eE2 is EventDecl("E2", AssertMaxInstances(1), NIL).
eE3 is EventDecl("E3", NIL, NIL).
eE4 is EventDecl("E4", AssertMaxInstances(1), NIL).
eUnit is EventDecl("Unit", AssertMaxInstances(1), NIL).

   es1 is EventSetDecl("es1", mReal).
   InEventSet(es1, eE3).
   ///////////////////////////////////////////////
   ///////    Declartions of Machines     ////////
   ///////////////////////////////////////////////
     
   mReal is MachineDecl("Real", FALSE, NIL).
   MachStart(mReal, sReal_Init).

   mGhost is MachineDecl("Ghost", TRUE, NIL).
   MachStart(mGhost, sGhost_Init).

    ///////////////////////////////////////////////
   ///////         Var Declarations        ////////
   ///////////////////////////////////////////////
 
   VarDecl("ghost", mReal, ID, TRUE).  
   VarDecl("test", mReal, BOOL, FALSE).  
   VarDecl("real", mGhost, ID, FALSE). 

   ///////////////////////////////////////////////
   ///////  Real States and Transitions   ////////
   ///////////////////////////////////////////////
     
   sReal_Init is StateDecl(     
       "Real_Init",
       mReal,
       `{
	       ghost = new Ghost(real = this);  
           raise(Events.Unit);	   
       }`,
       NIL).                   
   
   mReal_Action_1 is ActionDecl("Action_5_1", mReal, `{send(ghost, Events.E3);}`). //// Send inside an action

   mReal_Action is ActionDecl("Action_5", mReal, `{send(ghost, Events.E3);}`). //// Send inside an action

   Install(sReal_S1, eE2, mReal_Action). 
   Install(sReal_S1, eE4, mReal_Action_1).

   sReal_S1 is StateDecl(
       "Real_S1",
	   mReal,
	   `{
          send(ghost, Events.E1);
	      
	   }`,
	   es1).



   TransDecl(sReal_Init, eUnit, sReal_S1, FALSE).
                    
   ///////////////////////////////////////////////
   ///////  ghost States and Transitions   ////////
   ///////////////////////////////////////////////
     
   sGhost_Init is StateDecl(
       "Ghost_Init",
	   mGhost,
	   `{
		send (real, Events.E3);
	   }`,
	   NIL).

  sGhost_S1 is StateDecl(
      "Ghost_S1",
	  mGhost,
	  `{
		 
		 send (real, Events.E2);		 	  
	  }`,
	  NIL). 

  sGhost_S2 is StateDecl(
      "Ghost_S2",
	  mGhost,
	  `{
		 send (real, Events.E4);	 	  
	  }`,
	  NIL). 
   TransDecl(sGhost_Init, eE1, sGhost_S1, FALSE).
   TransDecl(sGhost_S1, eE3, sGhost_S2, FALSE).
   TransDecl(sGhost_S2, eE3, sGhost_S1, FALSE).

   
   MainDecl(New(MachType("Real"), NIL)).
}
