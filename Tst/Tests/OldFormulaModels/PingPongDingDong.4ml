[
	parsers.DSL = '"Parser at ..\Tools\PCompiler\DSLParser.dll"',
	modules.PData = '"PData at ..\Libraries\Formula\PData.4ml"',
	parse_ActiveParser = "DSL"
]

model PingPong of PData
{
   ///////////////////////////////////////////////
   ///////        Foreign Functions       ////////
   ///////////////////////////////////////////////

   ///////////////////////////////////////////////
   ///////        Event Alphabet          ////////
   ///////////////////////////////////////////////

   ePing is EventDecl("ping", AssertMaxInstances(1), NIL).
   ePong is EventDecl("pong", AssertMaxInstances(1), NIL).
   eDing is EventDecl("ding", AssertMaxInstances(1), NIL).
   eDong is EventDecl("dong", AssertMaxInstances(1), NIL).
   eSuccess is EventDecl("Success", AssertMaxInstances(1), NIL).   
      
   ///////////////////////////////////////////////
   ///////    Declartions of Machines     ////////
   ///////////////////////////////////////////////
     
   mPing is MachineDecl("Ping", FALSE, NIL).
   MachStart(mPing, sPing_start).

   mPong is MachineDecl("Pong", FALSE, NIL).
   MachStart(mPong, sPong_start).
      
    ///////////////////////////////////////////////
   ///////         Var Declarations        ////////
   ///////////////////////////////////////////////
 
   VarDecl("pongId", mPing, ID, FALSE).      
   VarDecl("pingId", mPong, ID, FALSE).      
   
   ///////////////////////////////////////////////
   ///////  Ping States and Transitions   ////////
   ///////////////////////////////////////////////
     
   sPing_start is StateDecl(     
       "Ping_start",
       mPing,
       `{
	       pongId = new Pong(pingId = THIS);
	       raise(Events.Success);   	   
       }`,
       NIL).                   
   TransDecl(sPing_start, eSuccess, sPing_ping1, FALSE).
	   
   sPing_ping1 is StateDecl(
       "Ping_ping1",
	   mPing,
	   `{
	      send(pongId, Events.ping);
	      raise(Events.Success);   	   
	   }`,
	   NIL).
   TransDecl(sPing_ping1, eSuccess, sPing_ding1, TRUE).
   TransDecl(sPing_ping1, eDong, sPing_ping2, FALSE).

   sPing_ding1 is StateDecl(
       "Ping_SendDing",
	   mPing,
	   `{
	      send(pongId, Events.ding);
	   }`,
	   NIL).

  sPing_ping2 is StateDecl(
      "Ping_ping2",
	  mPing,
	  `{
	  }`,
	  NIL). 
   TransDecl(sPing_ping2, ePong, sPing_ping1, FALSE).

                    
   ///////////////////////////////////////////////
   ///////  Pong States and Transitions   ////////
   ///////////////////////////////////////////////
     
   sPong_start is StateDecl(
       "Pong_start",
	   mPong,
	   `{
	   }`,
	   NIL).
   TransDecl(sPong_start, ePing, sPong_dong1, TRUE).
   TransDecl(sPong_start, eSuccess, sPong_pong1, FALSE).

  sPong_dong1 is StateDecl(
      "Pong_dong1",
	  mPong,
	  `{
	  }`,
	  NIL). 
   TransDecl(sPong_dong1, eDing, sPong_dong2, FALSE).

  sPong_dong2 is StateDecl(
      "Pong_dong2",
	  mPong,
	  `{
	      send(pingId, Events.dong);
	      raise(Events.Success);
	  }`,
	  NIL). 

  sPong_pong1 is StateDecl(
      "Pong_pong1",
	  mPong,
	  `{
	      send(pingId, Events.pong);
	      raise(Events.Success);
	  }`,
	  NIL).
   TransDecl(sPong_pong1, eSuccess, sPong_start, FALSE).
   
   MainDecl(New(MachType("Ping"), NIL)).
}