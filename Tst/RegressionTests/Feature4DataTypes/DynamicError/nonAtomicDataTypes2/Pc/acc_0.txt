=================================
         Console output          
=================================
OUT: Writing stubs.c ...
OUT: Writing program.h ...
OUT: Writing program.c ...
OUT: Writing nonAtomicDataTypes.zing ...
OUT: Compiling nonAtomicDataTypes.zing to nonAtomicDataTypes.dll ...
OUT: nonatomicdatatypes.p (27, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (27, 5): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (27, 11): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (27, 11): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: nonatomicdatatypes.p (27, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (27, 14): inferred type:  TupType(BaseType(INT), NIL)
OUT: nonatomicdatatypes.p (28, 11): inferred type:  NIL
OUT: nonatomicdatatypes.p (28, 11): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (28, 17): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (28, 17): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: nonatomicdatatypes.p (28, 20): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (28, 20): inferred type:  TupType(BaseType(INT), NIL)
OUT: nonatomicdatatypes.p (29, 11): inferred type:  NIL
OUT: nonatomicdatatypes.p (29, 11): inferred type:  SeqType(BaseType(ANY))
OUT: nonatomicdatatypes.p (29, 16): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (30, 11): inferred type:  NIL
OUT: nonatomicdatatypes.p (30, 11): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (30, 17): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (31, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (31, 12): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (31, 19): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (31, 22): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (31, 25): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (32, 11): inferred type:  NIL
OUT: nonatomicdatatypes.p (32, 11): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (32, 17): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (33, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (33, 12): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (33, 19): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (33, 22): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (33, 25): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (35, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (35, 5): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (35, 11): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (35, 11): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: nonatomicdatatypes.p (35, 13): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (35, 13): inferred type:  TupType(BaseType(INT), NIL)
OUT: nonatomicdatatypes.p (36, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (36, 5): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (36, 11): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (36, 11): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: nonatomicdatatypes.p (36, 13): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (36, 13): inferred type:  TupType(BaseType(INT), NIL)
OUT: nonatomicdatatypes.p (37, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (37, 13): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (37, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (37, 15): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (37, 18): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (37, 21): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (38, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (38, 13): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (38, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (38, 15): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (38, 18): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (38, 21): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (40, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (40, 5): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (40, 11): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (41, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (41, 13): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (41, 20): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (41, 23): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (41, 26): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (42, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (42, 13): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (42, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (42, 15): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (42, 18): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (42, 21): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (44, 5): inferred type:  NIL
OUT: nonatomicdatatypes.p (44, 11): inferred type:  BaseType(EVENT)
OUT: nonatomicdatatypes.p (50, 8): inferred type:  NIL
OUT: nonatomicdatatypes.p (50, 15): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (55, 9): inferred type:  NIL
OUT: nonatomicdatatypes.p (55, 16): inferred type:  NmdTupType(NmdTupTypeField("a", SeqType(BaseType(INT))), NmdTupType(NmdTupTypeField("b", MapType(BaseType(INT), SeqType(BaseType(INT)))), NIL))
OUT: nonatomicdatatypes.p (60, 8): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (60, 8): inferred type:  NIL
OUT: nonatomicdatatypes.p (60, 12): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (60, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (60, 16): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (61, 8): inferred type:  NIL
OUT: nonatomicdatatypes.p (61, 15): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (69, 7): inferred type:  NIL
OUT: nonatomicdatatypes.p (69, 7): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (69, 12): inferred type:  BaseType(ANY)
OUT: nonatomicdatatypes.p (69, 20): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (70, 4): inferred type:  NIL
OUT: nonatomicdatatypes.p (70, 11): inferred type:  SeqType(BaseType(INT))
OUT: nonatomicdatatypes.p (70, 13): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (70, 14): inferred type:  BaseType(INT)
OUT: nonatomicdatatypes.p (70, 17): inferred type:  BaseType(BOOL)
OUT: nonatomicdatatypes.p (70, 20): inferred type:  BaseType(INT)
OUT: 
EXIT: 0
