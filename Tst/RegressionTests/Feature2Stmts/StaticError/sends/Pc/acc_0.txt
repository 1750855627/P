=================================
         Console output          
=================================
OUT: sends.p (21, 4): inferred type:  BaseType(REAL)
OUT: sends.p (21, 4): inferred type:  NIL
OUT: sends.p (21, 10): inferred type:  BaseType(REAL)
OUT: sends.p (22, 4): inferred type:  NIL
OUT: sends.p (22, 10): inferred type:  BaseType(EVENT)
OUT: sends.p (28, 4): inferred type:  ERROR
OUT: sends.p (28, 4): inferred type:  NIL
OUT: sends.p (28, 4): inferred type:  SeqType(BaseType(ANY))
OUT: sends.p (28, 11): inferred type:  BaseType(INT)
OUT: sends.p (29, 4): inferred type:  NIL
OUT: sends.p (29, 4): inferred type:  TupType(BaseType(ANY), TupType(BaseType(INT), NIL))
OUT: sends.p (29, 12): inferred type:  TupType(BaseType(INT), TupType(BaseType(ANY), NIL))
OUT: sends.p (29, 18): inferred type:  TupType(BaseType(ANY), TupType(BaseType(INT), NIL))
OUT: sends.p (31, 4): inferred type:  ERROR
OUT: sends.p (31, 4): inferred type:  NIL
OUT: sends.p (31, 9): inferred type:  BaseType(REAL)
OUT: sends.p (31, 14): inferred type:  BaseType(EVENT)
OUT: sends.p (31, 22): inferred type:  TupType(BaseType(INT), NIL)
OUT: sends.p (32, 4): inferred type:  ERROR
OUT: sends.p (32, 4): inferred type:  NIL
OUT: sends.p (32, 22): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), TupType(BaseType(INT), NIL)))
OUT: sends.p (32, 25): inferred type:  BaseType(INT)
OUT: sends.p (32, 25): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: sends.p (32, 28): inferred type:  BaseType(INT)
OUT: sends.p (32, 28): inferred type:  TupType(BaseType(INT), NIL)
OUT: sends.p (33, 4): inferred type:  ERROR
OUT: sends.p (33, 4): inferred type:  NIL
OUT: sends.p (33, 21): inferred type:  BaseType(BOOL)
OUT: sends.p (34, 4): inferred type:  ERROR
OUT: sends.p (34, 4): inferred type:  NIL
OUT: sends.p (34, 21): inferred type:  TupType(BaseType(ANY), TupType(BaseType(ANY), NIL))
OUT: sends.p (35, 4): inferred type:  ERROR
OUT: sends.p (35, 4): inferred type:  NIL
OUT: sends.p (35, 21): inferred type:  TupType(BaseType(INT), TupType(BaseType(ANY), NIL))
OUT: sends.p (37, 4): inferred type:  ERROR
OUT: sends.p (37, 4): inferred type:  NIL
OUT: sends.p (37, 14): inferred type:  BaseType(EVENT)
OUT: sends.p (37, 23): inferred type:  TupType(BaseType(INT), TupType(BaseType(BOOL), NIL))
OUT: sends.p (38, 4): inferred type:  NIL
OUT: sends.p (38, 23): inferred type:  TupType(BaseType(BOOL), TupType(BaseType(BOOL), NIL))
OUT: sends.p (38, 29): inferred type:  BaseType(BOOL)
OUT: sends.p (38, 29): inferred type:  TupType(BaseType(BOOL), NIL)
OUT: sends.p (39, 4): inferred type:  ERROR
OUT: sends.p (39, 4): inferred type:  NIL
OUT: sends.p (39, 22): inferred type:  BaseType(INT)
OUT: sends.p (40, 4): inferred type:  ERROR
OUT: sends.p (40, 4): inferred type:  NIL
OUT: sends.p (40, 23): inferred type:  TupType(BaseType(BOOL), NIL)
OUT: sends.p (41, 4): inferred type:  ERROR
OUT: sends.p (41, 4): inferred type:  NIL
OUT: sends.p (42, 4): inferred type:  ERROR
OUT: sends.p (42, 4): inferred type:  NIL
OUT: sends.p (44, 4): inferred type:  NIL
OUT: sends.p (45, 4): inferred type:  ERROR
OUT: sends.p (45, 4): inferred type:  NIL
OUT: sends.p (47, 4): inferred type:  NIL
OUT: sends.p (48, 4): inferred type:  NIL
OUT: sends.p (49, 4): inferred type:  ERROR
OUT: sends.p (49, 4): inferred type:  NIL
OUT: sends.p (50, 4): inferred type:  ERROR
OUT: sends.p (50, 4): inferred type:  NIL
OUT: sends.p (51, 4): inferred type:  ERROR
OUT: sends.p (51, 4): inferred type:  NIL
OUT: sends.p (51, 14): inferred type:  BaseType(EVENT)
OUT: sends.p (52, 4): inferred type:  NIL
OUT: sends.p (54, 4): inferred type:  ERROR
OUT: sends.p (54, 4): inferred type:  NIL
OUT: sends.p (56, 4): inferred type:  NIL
OUT: sends.p (56, 12): inferred type:  BaseType(EVENT)
OUT: sends.p (56, 18): inferred type:  SeqType(BaseType(INT))
OUT: sends.p (57, 4): inferred type:  ERROR
OUT: sends.p (57, 4): inferred type:  NIL
OUT: sends.p (57, 12): inferred type:  BaseType(EVENT)
OUT: sends.p (57, 20): inferred type:  TupType(BaseType(ANY), TupType(BaseType(BOOL), NIL))
OUT: sends.p (58, 4): inferred type:  ERROR
OUT: sends.p (58, 4): inferred type:  NIL
OUT: sends.p (60, 4): inferred type:  NIL
OUT: sends.p (60, 12): inferred type:  BaseType(EVENT)
OUT: sends.p (60, 16): inferred type:  TupType(BaseType(EVENT), TupType(SeqType(BaseType(INT)), NIL))
OUT: sends.p (60, 22): inferred type:  TupType(SeqType(BaseType(INT)), NIL)
OUT: sends.p (62, 4): inferred type:  ERROR
OUT: sends.p (62, 4): inferred type:  NIL
OUT: sends.p (62, 12): inferred type:  BaseType(ANY)
OUT: sends.p (75, 2): inferred type:  NIL
OUT: sends.p (28, 4): invalid assignment. right hand side is not a subtype of left hand side
OUT: sends.p (31, 4): invalid payload type in send
OUT: sends.p (32, 4): invalid payload type in send
OUT: sends.p (33, 4): invalid payload type in send
OUT: sends.p (34, 4): invalid payload type in send
OUT: sends.p (35, 4): invalid payload type in send
OUT: sends.p (37, 4): invalid payload type in send
OUT: sends.p (39, 4): invalid payload type in send
OUT: sends.p (40, 4): invalid payload type in send
OUT: sends.p (41, 4): invalid payload type in send
OUT: sends.p (42, 4): invalid payload type in send
OUT: sends.p (45, 4): invalid payload type in send
OUT: sends.p (49, 4): invalid payload type in send
OUT: sends.p (50, 4): invalid payload type in send
OUT: sends.p (51, 4): invalid payload type in send
OUT: sends.p (54, 4): argument 1 of "send" expects a machine value
OUT: sends.p (57, 4): invalid payload type in monitor
OUT: sends.p (58, 4): invalid payload type in monitor (cannot send null value)
OUT: sends.p (62, 4): argument 1 of "monitor" expects an event value
OUT: Compilation failed
EXIT: -1
