// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  Z3479891
// DateTime: 9/10/2013 2:09:17 PM
// UserName: t-dimibo
// Input file <parser.y - 9/10/2013 2:09:16 PM>

// options: babel conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PParser
{
internal enum PTokens {
    error=1,EOF=2,T_INT=3,T_BOOL=4,T_EVENTID=5,T_MACHINEID=6,
    T_ANY=7,T_SEQ=8,MAIN=9,EVENT=10,MACHINE=11,ASSUME=12,
    GHOST=13,VAR=14,START=15,FOREIGN=16,STATE=17,FUN=18,
    ACTION=19,MAXQUEUE=20,SUBMACHINE=21,ENTRY=22,EXIT=23,DEFER=24,
    IGNORE=25,GOTO=26,ON=27,DO=28,PUSH=29,IF=30,
    WHILE=31,THIS=32,TRIGGER=33,PAYLOAD=34,ARG=35,NEW=36,
    RETURN=37,ID=38,LEAVE=39,ASSERT=40,SCALL=41,RAISE=42,
    SEND=43,DEFAULT=44,DELETE=45,NULL=46,LPAREN=47,RPAREN=48,
    LCBRACE=49,RCBRACE=50,LBRACKET=51,RBRACKET=52,SIZEOF=53,TRUE=54,
    FALSE=55,ASSIGN=56,EQ=57,NE=58,LT=59,GT=60,
    LE=61,GE=62,LAND=63,LNOT=64,LOR=65,DOT=66,
    COLON=67,COMMA=68,SEMICOLON=69,INT=70,REAL=71,BOOL=72,
    PLUS=73,MINUS=74,DIV=75,MUL=76,UMINUS=77,PREC_SEQ=78,
    PREC_EVERYTHING_ELSE=79,ELSE=80,maxParseToken=81,LEX_WHITE=82,LEX_ERROR=83,LEX_COMMENT=84};

internal partial struct LexValue
#line 8 "parser.y"
{
#line 9 "parser.y"
	public string s;
#line 10 "parser.y"
	public bool b;
#line 11 "parser.y"
	public Ops uop;
#line 12 "parser.y"
	public Ops bop;
#line 13 "parser.y"
	public IDSLStmt stmt;
#line 14 "parser.y"
	public IDSLExp exp;
#line 15 "parser.y"
	public TypeNode type;
#line 16 "parser.y"
	public BaseNode node;
#line 17 "parser.y"
	public int assert;
#line 18 "parser.y"
	public int assume;
#line 19 "parser.y"
	public List<INode> lst;
#line 20 "parser.y"
	public List<IDSLStmt> stmtLst;
#line 21 "parser.y"
	public List<string> slst;
#line 22 "parser.y"
}
// Abstract base class for GPLEX scanners
internal abstract class PScanBase : AbstractScanner<LexValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public LexValue yylval;
  public LexLocation yylloc;
  public ScanObj( int t, LexValue val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class PParser: ShiftReduceParser<LexValue, LexLocation>
{
  // Verbatim content from parser.y - 9/10/2013 2:09:16 PM
#line 64 "parser.y"

#line 65 "parser.y"
void debug(string msg, LexLocation loc) {
#line 66 "parser.y"
	Console.WriteLine(msg);
#line 67 "parser.y"
}
#line 68 "parser.y"

#line 69 "parser.y"
internal class Cast<T1,T2> where T2 : T1
#line 70 "parser.y"
{
#line 71 "parser.y"
	public static IEnumerable<T2> list(IEnumerable<T1> l) {
#line 72 "parser.y"
		foreach (T1 e in l) { yield return (T2)e; }
#line 73 "parser.y"
	}
#line 74 "parser.y"
}
#line 75 "parser.y"

#line 76 "parser.y"
public List<INode> prepend(INode n, List<INode> l) { l.Insert(0, n); return l; }
#line 77 "parser.y"
public List<INode> prependF(LexValue v, List<INode> l) { 
#line 78 "parser.y"
	if (v.lst != null) {
#line 79 "parser.y"
		l.InsertRange(0,v.lst);
#line 80 "parser.y"
	} else {
#line 81 "parser.y"
		l.Insert(0,v.node);
#line 82 "parser.y"
	}
#line 83 "parser.y"
	return l;
#line 84 "parser.y"
}
#line 85 "parser.y"

#line 86 "parser.y"
public void setLoc(INode n, LexLocation l) { n.loc = new DSLLoc(l); }
#line 87 "parser.y"
public void setLoc(INode n, LexLocation s, LexLocation e) { n.loc = new DSLLoc(s.Merge(e)); }
  // End verbatim content from parser.y - 9/10/2013 2:09:16 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[165];
  private static State[] states = new State[301];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "PDeclaration", "EventDecl", "MachineDecl", "Type", 
      "NamedTupleType", "TupleType", "SeqType", "FieldTypeList", "TypeList", 
      "TypeOrNull", "AnnotationOrNull", "IsMain", "IsGhost", "MachineBody", "MachineBodyItem", 
      "VarDecl", "StateDecl", "ActionDecl", "FunDecl", "MaxQueueSizeDecl", "SubmachineDecl", 
      "SubmachineBody", "VarList", "IsForeign", "AttributeOrNull", "Params", 
      "StmtBlock", "StartOrNull", "StateBody", "StateBodyItem", "NonDefaultEventList", 
      "EventList", "EventID", "Stmt", "Exp", "OptionalLastArg", "FFCall", "ExpOrNull", 
      "Args", "StmtList", "Unary", "Multiplicative", "Additive", "Relational", 
      "Equality", "Exp_8", "Exp_7", "Exp_6", "Exp_5", "Exp_4", "Exp_3", "Exp_2", 
      "Exp_1", "Exp_0", "BaseId", "Bool", "NamedTuple", "Tuple", "NewExp", "Arg", 
      "PayloadKw", "ExpList", "NamedExpList", "KWArgs", "KWArgList", "ArgList", 
      "Attribute", };

  static PParser() {
    states[0] = new State(new int[]{10,6,9,299,2,300,13,-31,11,-31},new int[]{-1,1,-3,3,-4,5,-5,44,-14,45});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,6,9,299,2,300,13,-31,11,-31},new int[]{-1,4,-3,3,-4,5,-5,44,-14,45});
    states[4] = new State(-2);
    states[5] = new State(-4);
    states[6] = new State(new int[]{38,7});
    states[7] = new State(new int[]{67,15,40,-26,12,-26,69,-26},new int[]{-12,8});
    states[8] = new State(new int[]{40,11,12,13,69,-24},new int[]{-13,9});
    states[9] = new State(new int[]{69,10});
    states[10] = new State(-21);
    states[11] = new State(new int[]{70,12});
    states[12] = new State(-22);
    states[13] = new State(new int[]{70,14});
    states[14] = new State(-23);
    states[15] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-6,16,-7,22,-8,30,-9,31});
    states[16] = new State(-25);
    states[17] = new State(-6);
    states[18] = new State(-7);
    states[19] = new State(-8);
    states[20] = new State(-9);
    states[21] = new State(-10);
    states[22] = new State(-11);
    states[23] = new State(new int[]{38,38,3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-10,24,-11,36,-6,41,-7,22,-8,30,-9,31});
    states[24] = new State(new int[]{48,25,68,26});
    states[25] = new State(-14);
    states[26] = new State(new int[]{38,27});
    states[27] = new State(new int[]{67,28});
    states[28] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-6,29,-7,22,-8,30,-9,31});
    states[29] = new State(-16);
    states[30] = new State(-12);
    states[31] = new State(-13);
    states[32] = new State(new int[]{51,33});
    states[33] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-6,34,-7,22,-8,30,-9,31});
    states[34] = new State(new int[]{52,35});
    states[35] = new State(-20);
    states[36] = new State(new int[]{48,37});
    states[37] = new State(-17);
    states[38] = new State(new int[]{67,39});
    states[39] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-6,40,-7,22,-8,30,-9,31});
    states[40] = new State(-15);
    states[41] = new State(new int[]{68,42,48,-18});
    states[42] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-11,43,-6,41,-7,22,-8,30,-9,31});
    states[43] = new State(-19);
    states[44] = new State(-5);
    states[45] = new State(new int[]{13,64,11,-29},new int[]{-15,46});
    states[46] = new State(new int[]{11,47});
    states[47] = new State(new int[]{38,48});
    states[48] = new State(new int[]{49,49});
    states[49] = new State(new int[]{13,64,15,266,19,268,16,286,20,288,21,292,50,-32,14,-29,17,-55,18,-51},new int[]{-16,50,-17,52,-18,54,-15,55,-19,65,-30,66,-20,267,-21,271,-26,272,-22,287,-23,291});
    states[50] = new State(new int[]{50,51});
    states[51] = new State(-27);
    states[52] = new State(new int[]{13,64,15,266,19,268,16,286,20,288,21,292,50,-32,14,-29,17,-55,18,-51},new int[]{-16,53,-17,52,-18,54,-15,55,-19,65,-30,66,-20,267,-21,271,-26,272,-22,287,-23,291});
    states[53] = new State(-33);
    states[54] = new State(-34);
    states[55] = new State(new int[]{14,56});
    states[56] = new State(new int[]{38,61},new int[]{-25,57});
    states[57] = new State(new int[]{67,58});
    states[58] = new State(new int[]{3,17,4,18,5,19,6,20,7,21,47,23,8,32},new int[]{-6,59,-7,22,-8,30,-9,31});
    states[59] = new State(new int[]{69,60});
    states[60] = new State(-46);
    states[61] = new State(new int[]{68,62,67,-44});
    states[62] = new State(new int[]{38,61},new int[]{-25,63});
    states[63] = new State(-45);
    states[64] = new State(-28);
    states[65] = new State(-35);
    states[66] = new State(new int[]{17,67});
    states[67] = new State(new int[]{38,68});
    states[68] = new State(new int[]{49,69});
    states[69] = new State(new int[]{22,74,23,239,24,241,25,252,27,255,50,-56},new int[]{-31,70,-32,72});
    states[70] = new State(new int[]{50,71});
    states[71] = new State(-53);
    states[72] = new State(new int[]{22,74,23,239,24,241,25,252,27,255,50,-56},new int[]{-31,73,-32,72});
    states[73] = new State(-57);
    states[74] = new State(new int[]{49,76},new int[]{-29,75});
    states[75] = new State(-64);
    states[76] = new State(-88,new int[]{-42,77});
    states[77] = new State(new int[]{50,78,30,80,31,85,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173,49,76,40,204,43,209,41,219,42,224,37,230,39,234,69,236,45,237},new int[]{-36,79,-37,88,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,201,-29,203});
    states[78] = new State(-90);
    states[79] = new State(-89);
    states[80] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,81,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[81] = new State(new int[]{30,80,31,85,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173,49,76,40,204,43,209,41,219,42,224,37,230,39,234,69,236,45,237},new int[]{-36,82,-37,88,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,201,-29,203});
    states[82] = new State(new int[]{80,83,50,-72,30,-72,31,-72,76,-72,74,-72,64,-72,38,-72,32,-72,33,-72,44,-72,46,-72,70,-72,54,-72,55,-72,47,-72,36,-72,34,-72,35,-72,53,-72,49,-72,40,-72,43,-72,41,-72,42,-72,37,-72,39,-72,69,-72,45,-72});
    states[83] = new State(new int[]{30,80,31,85,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173,49,76,40,204,43,209,41,219,42,224,37,230,39,234,69,236,45,237},new int[]{-36,84,-37,88,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,201,-29,203});
    states[84] = new State(-71);
    states[85] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,86,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[86] = new State(new int[]{30,80,31,85,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173,49,76,40,204,43,209,41,219,42,224,37,230,39,234,69,236,45,237},new int[]{-36,87,-37,88,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,201,-29,203});
    states[87] = new State(-73);
    states[88] = new State(new int[]{56,89,47,128},new int[]{-41,199});
    states[89] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,90,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[90] = new State(new int[]{69,91});
    states[91] = new State(-74);
    states[92] = new State(new int[]{65,93,56,-103,47,-103,30,-103,31,-103,76,-103,74,-103,64,-103,38,-103,32,-103,33,-103,44,-103,46,-103,70,-103,54,-103,55,-103,36,-103,34,-103,35,-103,53,-103,49,-103,40,-103,43,-103,41,-103,42,-103,37,-103,39,-103,69,-103,45,-103,52,-103,68,-103,48,-103});
    states[93] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-49,94,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[94] = new State(new int[]{63,95,65,-104,56,-104,47,-104,30,-104,31,-104,76,-104,74,-104,64,-104,38,-104,32,-104,33,-104,44,-104,46,-104,70,-104,54,-104,55,-104,36,-104,34,-104,35,-104,53,-104,49,-104,40,-104,43,-104,41,-104,42,-104,37,-104,39,-104,69,-104,45,-104,52,-104,68,-104,48,-104});
    states[95] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-50,96,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[96] = new State(-106);
    states[97] = new State(-108);
    states[98] = new State(-109);
    states[99] = new State(new int[]{57,197,58,198,63,-111,65,-111,56,-111,47,-111,30,-111,31,-111,76,-111,74,-111,64,-111,38,-111,32,-111,33,-111,44,-111,46,-111,70,-111,54,-111,55,-111,36,-111,34,-111,35,-111,53,-111,49,-111,40,-111,43,-111,41,-111,42,-111,37,-111,39,-111,69,-111,45,-111,52,-111,68,-111,48,-111},new int[]{-47,100});
    states[100] = new State(new int[]{74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-52,101,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[101] = new State(-110);
    states[102] = new State(new int[]{59,193,60,194,61,195,62,196,73,191,74,192,57,-113,58,-113,63,-113,65,-113,56,-113,47,-113,30,-113,31,-113,76,-113,64,-113,38,-113,32,-113,33,-113,44,-113,46,-113,70,-113,54,-113,55,-113,36,-113,34,-113,35,-113,53,-113,49,-113,40,-113,43,-113,41,-113,42,-113,37,-113,39,-113,69,-113,45,-113,52,-113,68,-113,48,-113},new int[]{-46,103,-45,105});
    states[103] = new State(new int[]{74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-53,104,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[104] = new State(new int[]{73,191,74,192,57,-112,58,-112,63,-112,65,-112,56,-112,47,-112,30,-112,31,-112,76,-112,64,-112,38,-112,32,-112,33,-112,44,-112,46,-112,70,-112,54,-112,55,-112,36,-112,34,-112,35,-112,53,-112,49,-112,40,-112,43,-112,41,-112,42,-112,37,-112,39,-112,69,-112,45,-112,52,-112,68,-112,48,-112},new int[]{-45,105});
    states[105] = new State(new int[]{74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-54,106,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[106] = new State(new int[]{76,119,75,120,59,-114,60,-114,61,-114,62,-114,73,-114,74,-114,57,-114,58,-114,63,-114,65,-114,56,-114,47,-114,30,-114,31,-114,64,-114,38,-114,32,-114,33,-114,44,-114,46,-114,70,-114,54,-114,55,-114,36,-114,34,-114,35,-114,53,-114,49,-114,40,-114,43,-114,41,-114,42,-114,37,-114,39,-114,69,-114,45,-114,52,-114,68,-114,48,-114},new int[]{-44,107});
    states[107] = new State(new int[]{74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-55,108,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[108] = new State(-116);
    states[109] = new State(new int[]{38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-56,110,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[110] = new State(new int[]{66,111,51,113,76,-118,75,-118,59,-118,60,-118,61,-118,62,-118,73,-118,74,-118,57,-118,58,-118,63,-118,65,-118,56,-118,47,-118,30,-118,31,-118,64,-118,38,-118,32,-118,33,-118,44,-118,46,-118,70,-118,54,-118,55,-118,36,-118,34,-118,35,-118,53,-118,49,-118,40,-118,43,-118,41,-118,42,-118,37,-118,39,-118,69,-118,45,-118,52,-118,68,-118,48,-118});
    states[111] = new State(new int[]{38,112});
    states[112] = new State(-120);
    states[113] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,114,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[114] = new State(new int[]{52,115});
    states[115] = new State(-121);
    states[116] = new State(new int[]{63,95,65,-105,56,-105,47,-105,30,-105,31,-105,76,-105,74,-105,64,-105,38,-105,32,-105,33,-105,44,-105,46,-105,70,-105,54,-105,55,-105,36,-105,34,-105,35,-105,53,-105,49,-105,40,-105,43,-105,41,-105,42,-105,37,-105,39,-105,69,-105,45,-105,52,-105,68,-105,48,-105});
    states[117] = new State(-107);
    states[118] = new State(new int[]{76,119,75,120,59,-115,60,-115,61,-115,62,-115,73,-115,74,-115,57,-115,58,-115,63,-115,65,-115,56,-115,47,-115,30,-115,31,-115,64,-115,38,-115,32,-115,33,-115,44,-115,46,-115,70,-115,54,-115,55,-115,36,-115,34,-115,35,-115,53,-115,49,-115,40,-115,43,-115,41,-115,42,-115,37,-115,39,-115,69,-115,45,-115,52,-115,68,-115,48,-115},new int[]{-44,107});
    states[119] = new State(-93);
    states[120] = new State(-94);
    states[121] = new State(-117);
    states[122] = new State(-91);
    states[123] = new State(-92);
    states[124] = new State(new int[]{66,111,51,113,76,-119,75,-119,59,-119,60,-119,61,-119,62,-119,73,-119,74,-119,57,-119,58,-119,63,-119,65,-119,56,-119,47,-119,30,-119,31,-119,64,-119,38,-119,32,-119,33,-119,44,-119,46,-119,70,-119,54,-119,55,-119,36,-119,34,-119,35,-119,53,-119,49,-119,40,-119,43,-119,41,-119,42,-119,37,-119,39,-119,69,-119,45,-119,52,-119,68,-119,48,-119});
    states[125] = new State(-122);
    states[126] = new State(new int[]{47,128,66,-157,51,-157,76,-157,75,-157,59,-157,60,-157,61,-157,62,-157,73,-157,74,-157,57,-157,58,-157,63,-157,65,-157,56,-157,30,-157,31,-157,64,-157,38,-157,32,-157,33,-157,44,-157,46,-157,70,-157,54,-157,55,-157,36,-157,34,-157,35,-157,53,-157,49,-157,40,-157,43,-157,41,-157,42,-157,37,-157,39,-157,69,-157,45,-157,52,-157,68,-157,48,-157},new int[]{-41,127});
    states[127] = new State(-148);
    states[128] = new State(new int[]{48,131,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-68,129,-37,132,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[129] = new State(new int[]{48,130});
    states[130] = new State(-153);
    states[131] = new State(-154);
    states[132] = new State(new int[]{68,133,48,-155});
    states[133] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-68,134,-37,132,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[134] = new State(-156);
    states[135] = new State(-158);
    states[136] = new State(-159);
    states[137] = new State(-160);
    states[138] = new State(-161);
    states[139] = new State(-123);
    states[140] = new State(-124);
    states[141] = new State(-146);
    states[142] = new State(-147);
    states[143] = new State(-125);
    states[144] = new State(new int[]{38,182,76,97,74,122,64,123,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,188,36,156,34,170,35,171,53,173,3,17,4,18,5,19,6,20,7,21,8,32},new int[]{-65,145,-37,147,-6,179,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172,-7,22,-8,30,-9,31});
    states[145] = new State(new int[]{48,146});
    states[146] = new State(-142);
    states[147] = new State(new int[]{68,148,48,178});
    states[148] = new State(new int[]{48,149,76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-64,150,-37,177,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[149] = new State(-138);
    states[150] = new State(new int[]{48,151,68,152});
    states[151] = new State(-139);
    states[152] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,153,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[153] = new State(-137);
    states[154] = new State(-126);
    states[155] = new State(-128);
    states[156] = new State(new int[]{38,157});
    states[157] = new State(new int[]{47,159},new int[]{-66,158});
    states[158] = new State(-145);
    states[159] = new State(new int[]{48,162,38,163},new int[]{-67,160});
    states[160] = new State(new int[]{48,161});
    states[161] = new State(-151);
    states[162] = new State(-152);
    states[163] = new State(new int[]{56,164});
    states[164] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,165,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[165] = new State(new int[]{68,166,48,-149});
    states[166] = new State(new int[]{38,163},new int[]{-67,167});
    states[167] = new State(-150);
    states[168] = new State(-129);
    states[169] = new State(-133);
    states[170] = new State(-134);
    states[171] = new State(-135);
    states[172] = new State(-130);
    states[173] = new State(new int[]{47,174});
    states[174] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,175,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[175] = new State(new int[]{48,176});
    states[176] = new State(-131);
    states[177] = new State(-136);
    states[178] = new State(-127);
    states[179] = new State(new int[]{48,180});
    states[180] = new State(new int[]{34,170,35,171},new int[]{-63,181});
    states[181] = new State(-132);
    states[182] = new State(new int[]{56,183,47,128,66,-157,51,-157,76,-157,75,-157,59,-157,60,-157,61,-157,62,-157,73,-157,74,-157,57,-157,58,-157,63,-157,65,-157,68,-157,48,-157},new int[]{-41,127});
    states[183] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,184,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[184] = new State(new int[]{68,185,48,-140});
    states[185] = new State(new int[]{38,187},new int[]{-65,186});
    states[186] = new State(-141);
    states[187] = new State(new int[]{56,183});
    states[188] = new State(new int[]{38,190,76,97,74,122,64,123,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,188,36,156,34,170,35,171,53,173,3,17,4,18,5,19,6,20,7,21,8,32},new int[]{-65,145,-37,147,-6,189,-10,24,-11,36,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172,-7,22,-8,30,-9,31});
    states[189] = new State(new int[]{48,180,68,42});
    states[190] = new State(new int[]{56,183,67,39,47,128,66,-157,51,-157,76,-157,75,-157,59,-157,60,-157,61,-157,62,-157,73,-157,74,-157,57,-157,58,-157,63,-157,65,-157,68,-157,48,-157},new int[]{-41,127});
    states[191] = new State(-95);
    states[192] = new State(-96);
    states[193] = new State(-97);
    states[194] = new State(-98);
    states[195] = new State(-99);
    states[196] = new State(-100);
    states[197] = new State(-101);
    states[198] = new State(-102);
    states[199] = new State(new int[]{69,200});
    states[200] = new State(-85);
    states[201] = new State(new int[]{69,202,66,-130,51,-130,76,-130,75,-130,59,-130,60,-130,61,-130,62,-130,73,-130,74,-130,57,-130,58,-130,63,-130,65,-130,56,-130,47,-130});
    states[202] = new State(-80);
    states[203] = new State(-75);
    states[204] = new State(new int[]{47,205});
    states[205] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,206,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[206] = new State(new int[]{48,207});
    states[207] = new State(new int[]{69,208});
    states[208] = new State(-76);
    states[209] = new State(new int[]{47,210});
    states[210] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,211,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[211] = new State(new int[]{68,212});
    states[212] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,213,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[213] = new State(new int[]{68,217,48,-87},new int[]{-38,214});
    states[214] = new State(new int[]{48,215});
    states[215] = new State(new int[]{69,216});
    states[216] = new State(-77);
    states[217] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,218,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[218] = new State(-86);
    states[219] = new State(new int[]{47,220});
    states[220] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,221,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[221] = new State(new int[]{48,222});
    states[222] = new State(new int[]{69,223});
    states[223] = new State(-78);
    states[224] = new State(new int[]{47,225});
    states[225] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173},new int[]{-37,226,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[226] = new State(new int[]{68,217,48,-87},new int[]{-38,227});
    states[227] = new State(new int[]{48,228});
    states[228] = new State(new int[]{69,229});
    states[229] = new State(-79);
    states[230] = new State(new int[]{76,97,74,122,64,123,38,126,32,135,33,136,44,137,46,138,70,139,54,141,55,142,47,144,36,156,34,170,35,171,53,173,69,-144},new int[]{-40,231,-37,233,-48,92,-49,116,-50,117,-51,98,-52,99,-53,102,-54,118,-55,121,-43,109,-56,124,-57,125,-58,140,-59,143,-60,154,-61,155,-62,168,-63,169,-39,172});
    states[231] = new State(new int[]{69,232});
    states[232] = new State(-81);
    states[233] = new State(-143);
    states[234] = new State(new int[]{69,235});
    states[235] = new State(-82);
    states[236] = new State(-83);
    states[237] = new State(new int[]{69,238});
    states[238] = new State(-84);
    states[239] = new State(new int[]{49,76},new int[]{-29,240});
    states[240] = new State(-65);
    states[241] = new State(new int[]{38,244},new int[]{-33,242});
    states[242] = new State(new int[]{69,243});
    states[243] = new State(-66);
    states[244] = new State(new int[]{68,245,69,-58});
    states[245] = new State(new int[]{38,250,44,251},new int[]{-34,246,-35,247});
    states[246] = new State(-59);
    states[247] = new State(new int[]{68,248,69,-60,26,-60,29,-60,28,-60});
    states[248] = new State(new int[]{38,250,44,251},new int[]{-34,249,-35,247});
    states[249] = new State(-61);
    states[250] = new State(-62);
    states[251] = new State(-63);
    states[252] = new State(new int[]{38,244},new int[]{-33,253});
    states[253] = new State(new int[]{69,254});
    states[254] = new State(-67);
    states[255] = new State(new int[]{38,250,44,251},new int[]{-34,256,-35,247});
    states[256] = new State(new int[]{26,257,29,260,28,263});
    states[257] = new State(new int[]{38,258});
    states[258] = new State(new int[]{69,259});
    states[259] = new State(-68);
    states[260] = new State(new int[]{38,261});
    states[261] = new State(new int[]{69,262});
    states[262] = new State(-69);
    states[263] = new State(new int[]{38,264});
    states[264] = new State(new int[]{69,265});
    states[265] = new State(-70);
    states[266] = new State(-54);
    states[267] = new State(-36);
    states[268] = new State(new int[]{38,269});
    states[269] = new State(new int[]{49,76},new int[]{-29,270});
    states[270] = new State(-52);
    states[271] = new State(-37);
    states[272] = new State(new int[]{18,273});
    states[273] = new State(new int[]{49,283,38,-164},new int[]{-27,274,-69,282});
    states[274] = new State(new int[]{38,275});
    states[275] = new State(new int[]{47,279},new int[]{-28,276,-7,281});
    states[276] = new State(new int[]{67,15,49,-26},new int[]{-12,277});
    states[277] = new State(new int[]{49,76},new int[]{-29,278});
    states[278] = new State(-47);
    states[279] = new State(new int[]{48,280,38,38},new int[]{-10,24});
    states[280] = new State(-48);
    states[281] = new State(-49);
    states[282] = new State(-163);
    states[283] = new State(new int[]{38,284});
    states[284] = new State(new int[]{50,285});
    states[285] = new State(-162);
    states[286] = new State(-50);
    states[287] = new State(-38);
    states[288] = new State(new int[]{70,289});
    states[289] = new State(new int[]{69,290});
    states[290] = new State(-43);
    states[291] = new State(-39);
    states[292] = new State(new int[]{38,293});
    states[293] = new State(new int[]{49,294});
    states[294] = new State(new int[]{15,266,17,-55,50,-42},new int[]{-24,295,-19,297,-30,66});
    states[295] = new State(new int[]{50,296});
    states[296] = new State(-40);
    states[297] = new State(new int[]{15,266,17,-55,50,-42},new int[]{-24,298,-19,297,-30,66});
    states[298] = new State(-41);
    states[299] = new State(-30);
    states[300] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,-1});
    rules[3] = new Rule(-1, new int[]{2});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-6, new int[]{3});
    rules[7] = new Rule(-6, new int[]{4});
    rules[8] = new Rule(-6, new int[]{5});
    rules[9] = new Rule(-6, new int[]{6});
    rules[10] = new Rule(-6, new int[]{7});
    rules[11] = new Rule(-6, new int[]{-7});
    rules[12] = new Rule(-6, new int[]{-8});
    rules[13] = new Rule(-6, new int[]{-9});
    rules[14] = new Rule(-7, new int[]{47,-10,48});
    rules[15] = new Rule(-10, new int[]{38,67,-6});
    rules[16] = new Rule(-10, new int[]{-10,68,38,67,-6});
    rules[17] = new Rule(-8, new int[]{47,-11,48});
    rules[18] = new Rule(-11, new int[]{-6});
    rules[19] = new Rule(-11, new int[]{-6,68,-11});
    rules[20] = new Rule(-9, new int[]{8,51,-6,52});
    rules[21] = new Rule(-4, new int[]{10,38,-12,-13,69});
    rules[22] = new Rule(-13, new int[]{40,70});
    rules[23] = new Rule(-13, new int[]{12,70});
    rules[24] = new Rule(-13, new int[]{});
    rules[25] = new Rule(-12, new int[]{67,-6});
    rules[26] = new Rule(-12, new int[]{});
    rules[27] = new Rule(-5, new int[]{-14,-15,11,38,49,-16,50});
    rules[28] = new Rule(-15, new int[]{13});
    rules[29] = new Rule(-15, new int[]{});
    rules[30] = new Rule(-14, new int[]{9});
    rules[31] = new Rule(-14, new int[]{});
    rules[32] = new Rule(-16, new int[]{});
    rules[33] = new Rule(-16, new int[]{-17,-16});
    rules[34] = new Rule(-17, new int[]{-18});
    rules[35] = new Rule(-17, new int[]{-19});
    rules[36] = new Rule(-17, new int[]{-20});
    rules[37] = new Rule(-17, new int[]{-21});
    rules[38] = new Rule(-17, new int[]{-22});
    rules[39] = new Rule(-17, new int[]{-23});
    rules[40] = new Rule(-23, new int[]{21,38,49,-24,50});
    rules[41] = new Rule(-24, new int[]{-19,-24});
    rules[42] = new Rule(-24, new int[]{});
    rules[43] = new Rule(-22, new int[]{20,70,69});
    rules[44] = new Rule(-25, new int[]{38});
    rules[45] = new Rule(-25, new int[]{38,68,-25});
    rules[46] = new Rule(-18, new int[]{-15,14,-25,67,-6,69});
    rules[47] = new Rule(-21, new int[]{-26,18,-27,38,-28,-12,-29});
    rules[48] = new Rule(-28, new int[]{47,48});
    rules[49] = new Rule(-28, new int[]{-7});
    rules[50] = new Rule(-26, new int[]{16});
    rules[51] = new Rule(-26, new int[]{});
    rules[52] = new Rule(-20, new int[]{19,38,-29});
    rules[53] = new Rule(-19, new int[]{-30,17,38,49,-31,50});
    rules[54] = new Rule(-30, new int[]{15});
    rules[55] = new Rule(-30, new int[]{});
    rules[56] = new Rule(-31, new int[]{});
    rules[57] = new Rule(-31, new int[]{-32,-31});
    rules[58] = new Rule(-33, new int[]{38});
    rules[59] = new Rule(-33, new int[]{38,68,-34});
    rules[60] = new Rule(-34, new int[]{-35});
    rules[61] = new Rule(-34, new int[]{-35,68,-34});
    rules[62] = new Rule(-35, new int[]{38});
    rules[63] = new Rule(-35, new int[]{44});
    rules[64] = new Rule(-32, new int[]{22,-29});
    rules[65] = new Rule(-32, new int[]{23,-29});
    rules[66] = new Rule(-32, new int[]{24,-33,69});
    rules[67] = new Rule(-32, new int[]{25,-33,69});
    rules[68] = new Rule(-32, new int[]{27,-34,26,38,69});
    rules[69] = new Rule(-32, new int[]{27,-34,29,38,69});
    rules[70] = new Rule(-32, new int[]{27,-34,28,38,69});
    rules[71] = new Rule(-36, new int[]{30,-37,-36,80,-36});
    rules[72] = new Rule(-36, new int[]{30,-37,-36});
    rules[73] = new Rule(-36, new int[]{31,-37,-36});
    rules[74] = new Rule(-36, new int[]{-37,56,-37,69});
    rules[75] = new Rule(-36, new int[]{-29});
    rules[76] = new Rule(-36, new int[]{40,47,-37,48,69});
    rules[77] = new Rule(-36, new int[]{43,47,-37,68,-37,-38,48,69});
    rules[78] = new Rule(-36, new int[]{41,47,-37,48,69});
    rules[79] = new Rule(-36, new int[]{42,47,-37,-38,48,69});
    rules[80] = new Rule(-36, new int[]{-39,69});
    rules[81] = new Rule(-36, new int[]{37,-40,69});
    rules[82] = new Rule(-36, new int[]{39,69});
    rules[83] = new Rule(-36, new int[]{69});
    rules[84] = new Rule(-36, new int[]{45,69});
    rules[85] = new Rule(-36, new int[]{-37,-41,69});
    rules[86] = new Rule(-38, new int[]{68,-37});
    rules[87] = new Rule(-38, new int[]{});
    rules[88] = new Rule(-42, new int[]{});
    rules[89] = new Rule(-42, new int[]{-42,-36});
    rules[90] = new Rule(-29, new int[]{49,-42,50});
    rules[91] = new Rule(-43, new int[]{74});
    rules[92] = new Rule(-43, new int[]{64});
    rules[93] = new Rule(-44, new int[]{76});
    rules[94] = new Rule(-44, new int[]{75});
    rules[95] = new Rule(-45, new int[]{73});
    rules[96] = new Rule(-45, new int[]{74});
    rules[97] = new Rule(-46, new int[]{59});
    rules[98] = new Rule(-46, new int[]{60});
    rules[99] = new Rule(-46, new int[]{61});
    rules[100] = new Rule(-46, new int[]{62});
    rules[101] = new Rule(-47, new int[]{57});
    rules[102] = new Rule(-47, new int[]{58});
    rules[103] = new Rule(-37, new int[]{-48});
    rules[104] = new Rule(-48, new int[]{-48,65,-49});
    rules[105] = new Rule(-48, new int[]{-49});
    rules[106] = new Rule(-49, new int[]{-49,63,-50});
    rules[107] = new Rule(-49, new int[]{-50});
    rules[108] = new Rule(-50, new int[]{76});
    rules[109] = new Rule(-50, new int[]{-51});
    rules[110] = new Rule(-51, new int[]{-52,-47,-52});
    rules[111] = new Rule(-51, new int[]{-52});
    rules[112] = new Rule(-52, new int[]{-53,-46,-53});
    rules[113] = new Rule(-52, new int[]{-53});
    rules[114] = new Rule(-53, new int[]{-53,-45,-54});
    rules[115] = new Rule(-53, new int[]{-54});
    rules[116] = new Rule(-54, new int[]{-54,-44,-55});
    rules[117] = new Rule(-54, new int[]{-55});
    rules[118] = new Rule(-55, new int[]{-43,-56});
    rules[119] = new Rule(-55, new int[]{-56});
    rules[120] = new Rule(-56, new int[]{-56,66,38});
    rules[121] = new Rule(-56, new int[]{-56,51,-37,52});
    rules[122] = new Rule(-56, new int[]{-57});
    rules[123] = new Rule(-56, new int[]{70});
    rules[124] = new Rule(-56, new int[]{-58});
    rules[125] = new Rule(-56, new int[]{-59});
    rules[126] = new Rule(-56, new int[]{-60});
    rules[127] = new Rule(-56, new int[]{47,-37,48});
    rules[128] = new Rule(-56, new int[]{-61});
    rules[129] = new Rule(-56, new int[]{-62});
    rules[130] = new Rule(-56, new int[]{-39});
    rules[131] = new Rule(-56, new int[]{53,47,-37,48});
    rules[132] = new Rule(-62, new int[]{47,-6,48,-63});
    rules[133] = new Rule(-62, new int[]{-63});
    rules[134] = new Rule(-63, new int[]{34});
    rules[135] = new Rule(-63, new int[]{35});
    rules[136] = new Rule(-64, new int[]{-37});
    rules[137] = new Rule(-64, new int[]{-64,68,-37});
    rules[138] = new Rule(-60, new int[]{47,-37,68,48});
    rules[139] = new Rule(-60, new int[]{47,-37,68,-64,48});
    rules[140] = new Rule(-65, new int[]{38,56,-37});
    rules[141] = new Rule(-65, new int[]{38,56,-37,68,-65});
    rules[142] = new Rule(-59, new int[]{47,-65,48});
    rules[143] = new Rule(-40, new int[]{-37});
    rules[144] = new Rule(-40, new int[]{});
    rules[145] = new Rule(-61, new int[]{36,38,-66});
    rules[146] = new Rule(-58, new int[]{54});
    rules[147] = new Rule(-58, new int[]{55});
    rules[148] = new Rule(-39, new int[]{38,-41});
    rules[149] = new Rule(-67, new int[]{38,56,-37});
    rules[150] = new Rule(-67, new int[]{38,56,-37,68,-67});
    rules[151] = new Rule(-66, new int[]{47,-67,48});
    rules[152] = new Rule(-66, new int[]{47,48});
    rules[153] = new Rule(-41, new int[]{47,-68,48});
    rules[154] = new Rule(-41, new int[]{47,48});
    rules[155] = new Rule(-68, new int[]{-37});
    rules[156] = new Rule(-68, new int[]{-37,68,-68});
    rules[157] = new Rule(-57, new int[]{38});
    rules[158] = new Rule(-57, new int[]{32});
    rules[159] = new Rule(-57, new int[]{33});
    rules[160] = new Rule(-57, new int[]{44});
    rules[161] = new Rule(-57, new int[]{46});
    rules[162] = new Rule(-69, new int[]{49,38,50});
    rules[163] = new Rule(-27, new int[]{-69});
    rules[164] = new Rule(-27, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PTokens.error, (int)PTokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> PDeclaration, Program
#line 96 "parser.y"
{ root.prepend((IPDeclaration)ValueStack[ValueStack.Depth-2].node); setLoc(root, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]);}
        break;
      case 6: // Type -> T_INT
#line 107 "parser.y"
{ CurrentSemanticValue.type = new TypeInt(); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-1]);}
        break;
      case 7: // Type -> T_BOOL
#line 108 "parser.y"
{ CurrentSemanticValue.type = new TypeBool(); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-1]);}
        break;
      case 8: // Type -> T_EVENTID
#line 109 "parser.y"
{ CurrentSemanticValue.type = new TypeEventID(); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-1]);}
        break;
      case 9: // Type -> T_MACHINEID
#line 110 "parser.y"
{ CurrentSemanticValue.type = new TypeMachineID(); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-1]);}
        break;
      case 10: // Type -> T_ANY
#line 111 "parser.y"
{ CurrentSemanticValue.type = new TypeAny(); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-1]);}
        break;
      case 14: // NamedTupleType -> LPAREN, FieldTypeList, RPAREN
#line 118 "parser.y"
{ CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 15: // FieldTypeList -> ID, COLON, Type
#line 122 "parser.y"
{ var t = new TypeNamedTuple(); t.prepend(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].type); CurrentSemanticValue.type = t; setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 16: // FieldTypeList -> FieldTypeList, COMMA, ID, COLON, Type
#line 123 "parser.y"
{ var t = (TypeNamedTuple)ValueStack[ValueStack.Depth-5].type; t.append(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].type); CurrentSemanticValue.type = t; setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);}
        break;
      case 17: // TupleType -> LPAREN, TypeList, RPAREN
#line 127 "parser.y"
{ CurrentSemanticValue.type = ValueStack[ValueStack.Depth-2].type; setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 18: // TypeList -> Type
#line 132 "parser.y"
{ var t = new TypeTuple(); t.append(ValueStack[ValueStack.Depth-1].type); CurrentSemanticValue.type = t; }
        break;
      case 19: // TypeList -> Type, COMMA, TypeList
#line 133 "parser.y"
{ var t = (TypeTuple) ValueStack[ValueStack.Depth-1].type; t.prepend(ValueStack[ValueStack.Depth-3].type); CurrentSemanticValue.type = t; }
        break;
      case 20: // SeqType -> T_SEQ, LBRACKET, Type, RBRACKET
#line 137 "parser.y"
{ CurrentSemanticValue.type = new TypeSeq(ValueStack[ValueStack.Depth-2].type); setLoc(CurrentSemanticValue.type, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 21: // EventDecl -> EVENT, ID, TypeOrNull, AnnotationOrNull, SEMICOLON
#line 142 "parser.y"
{ if (ValueStack[ValueStack.Depth-3].type != null) {
#line 143 "parser.y"
														CurrentSemanticValue.node = new EventDeclaration(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].assert, ValueStack[ValueStack.Depth-2].assume, ValueStack[ValueStack.Depth-3].type); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);
#line 144 "parser.y"
													  } else {
#line 145 "parser.y"
														CurrentSemanticValue.node = new EventDeclaration(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].assert, ValueStack[ValueStack.Depth-2].assume); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);
#line 146 "parser.y"
													  }
#line 147 "parser.y"
													}
        break;
      case 22: // AnnotationOrNull -> ASSERT, INT
#line 151 "parser.y"
{ CurrentSemanticValue.assert = Convert.ToInt32(ValueStack[ValueStack.Depth-1].s); CurrentSemanticValue.assume = -1;}
        break;
      case 23: // AnnotationOrNull -> ASSUME, INT
#line 152 "parser.y"
{ CurrentSemanticValue.assert = -1; CurrentSemanticValue.assume = Convert.ToInt32(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 24: // AnnotationOrNull -> /* empty */
#line 153 "parser.y"
{ CurrentSemanticValue.assert = -1; CurrentSemanticValue.assume = -1; }
        break;
      case 25: // TypeOrNull -> COLON, Type
#line 157 "parser.y"
{ CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
        break;
      case 26: // TypeOrNull -> /* empty */
#line 158 "parser.y"
{ CurrentSemanticValue.type = null; }
        break;
      case 27: // MachineDecl -> IsMain, IsGhost, MACHINE, ID, LCBRACE, MachineBody, RCBRACE
#line 163 "parser.y"
{ CurrentSemanticValue.node = new MachineDeclaration(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-6].b, ValueStack[ValueStack.Depth-7].b, Cast<INode, IMachineBodyItem>.list(ValueStack[ValueStack.Depth-2].lst)); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-7], LocationStack[LocationStack.Depth-1]);}
        break;
      case 28: // IsGhost -> GHOST
#line 167 "parser.y"
{ CurrentSemanticValue.b = true;}
        break;
      case 29: // IsGhost -> /* empty */
#line 168 "parser.y"
{ CurrentSemanticValue.b = false; }
        break;
      case 30: // IsMain -> MAIN
#line 172 "parser.y"
{ CurrentSemanticValue.b = true;  }
        break;
      case 31: // IsMain -> /* empty */
#line 173 "parser.y"
{ CurrentSemanticValue.b = false; }
        break;
      case 32: // MachineBody -> /* empty */
#line 178 "parser.y"
{ CurrentSemanticValue.lst = new List<INode>(); }
        break;
      case 33: // MachineBody -> MachineBodyItem, MachineBody
#line 179 "parser.y"
{ CurrentSemanticValue.lst = prependF(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1].lst); }
        break;
      case 40: // SubmachineDecl -> SUBMACHINE, ID, LCBRACE, SubmachineBody, RCBRACE
#line 192 "parser.y"
{ CurrentSemanticValue.node = new SubmachineDeclaration(ValueStack[ValueStack.Depth-4].s, Cast<INode, StateDeclaration>.list(ValueStack[ValueStack.Depth-2].lst)); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 41: // SubmachineBody -> StateDecl, SubmachineBody
#line 196 "parser.y"
{ prepend(ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].lst); }
        break;
      case 42: // SubmachineBody -> /* empty */
#line 197 "parser.y"
{ CurrentSemanticValue.lst = new List<INode>(); }
        break;
      case 43: // MaxQueueSizeDecl -> MAXQUEUE, INT, SEMICOLON
#line 201 "parser.y"
{ CurrentSemanticValue.node = new MaxQueueDeclaration(Convert.ToInt32(ValueStack[ValueStack.Depth-2].s)); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 44: // VarList -> ID
#line 205 "parser.y"
{ CurrentSemanticValue.slst = new List<string>(); CurrentSemanticValue.slst.Add(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 45: // VarList -> ID, COMMA, VarList
#line 206 "parser.y"
{ CurrentSemanticValue.slst.Insert(0, ValueStack[ValueStack.Depth-3].s); }
        break;
      case 46: // VarDecl -> IsGhost, VAR, VarList, COLON, Type, SEMICOLON
#line 210 "parser.y"
{ CurrentSemanticValue.lst = new List<INode>();
#line 211 "parser.y"
													  foreach (string s in ValueStack[ValueStack.Depth-4].slst) {
#line 212 "parser.y"
														var v = new VarDeclaration(ValueStack[ValueStack.Depth-2].type, s, ValueStack[ValueStack.Depth-6].b); CurrentSemanticValue.lst.Add(v);
#line 213 "parser.y"
														setLoc(v, LocationStack[LocationStack.Depth-6], LocationStack[LocationStack.Depth-1]);
#line 214 "parser.y"
													  }
#line 215 "parser.y"
													}
        break;
      case 47: // FunDecl -> IsForeign, FUN, AttributeOrNull, ID, Params, TypeOrNull, StmtBlock
#line 220 "parser.y"
{ CurrentSemanticValue.node = new FunDeclaration(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-7].b, (TypeNamedTuple) ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].type, (DSLBlock)ValueStack[ValueStack.Depth-1].stmt, (DSLAttribute)ValueStack[ValueStack.Depth-5].node); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-7], LocationStack[LocationStack.Depth-1]); }
        break;
      case 48: // Params -> LPAREN, RPAREN
#line 224 "parser.y"
{ CurrentSemanticValue.type = null; }
        break;
      case 50: // IsForeign -> FOREIGN
#line 229 "parser.y"
{ CurrentSemanticValue.b = true; }
        break;
      case 51: // IsForeign -> /* empty */
#line 230 "parser.y"
{ CurrentSemanticValue.b = false; }
        break;
      case 52: // ActionDecl -> ACTION, ID, StmtBlock
#line 235 "parser.y"
{ CurrentSemanticValue.node = new ActionDeclaration(ValueStack[ValueStack.Depth-2].s, (DSLBlock)ValueStack[ValueStack.Depth-1].stmt); }
        break;
      case 53: // StateDecl -> StartOrNull, STATE, ID, LCBRACE, StateBody, RCBRACE
#line 240 "parser.y"
{ CurrentSemanticValue.node = new StateDeclaration(ValueStack[ValueStack.Depth-4].s, Cast<INode, IStateBodyItem>.list(ValueStack[ValueStack.Depth-2].lst), ValueStack[ValueStack.Depth-6].b); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-6], LocationStack[LocationStack.Depth-1]);}
        break;
      case 54: // StartOrNull -> START
#line 244 "parser.y"
{ CurrentSemanticValue.b = true; }
        break;
      case 55: // StartOrNull -> /* empty */
#line 245 "parser.y"
{ CurrentSemanticValue.b = false; }
        break;
      case 56: // StateBody -> /* empty */
#line 248 "parser.y"
{ CurrentSemanticValue.lst = new List<INode>(); }
        break;
      case 57: // StateBody -> StateBodyItem, StateBody
#line 249 "parser.y"
{ CurrentSemanticValue.lst = prepend(ValueStack[ValueStack.Depth-2].node, ValueStack[ValueStack.Depth-1].lst); }
        break;
      case 58: // NonDefaultEventList -> ID
#line 253 "parser.y"
{ CurrentSemanticValue.slst = new List<string>(); CurrentSemanticValue.slst.Add(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 59: // NonDefaultEventList -> ID, COMMA, EventList
#line 254 "parser.y"
{ var l = ValueStack[ValueStack.Depth-1].slst; l.Insert(0, ValueStack[ValueStack.Depth-3].s); CurrentSemanticValue.slst = l; }
        break;
      case 60: // EventList -> EventID
#line 258 "parser.y"
{ CurrentSemanticValue.slst = new List<string>(); CurrentSemanticValue.slst.Add(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 61: // EventList -> EventID, COMMA, EventList
#line 259 "parser.y"
{ var l = ValueStack[ValueStack.Depth-1].slst; l.Insert(0, ValueStack[ValueStack.Depth-3].s); CurrentSemanticValue.slst = l; }
        break;
      case 64: // StateBodyItem -> ENTRY, StmtBlock
#line 268 "parser.y"
{ CurrentSemanticValue.node = new EntryFunction((DSLBlock)ValueStack[ValueStack.Depth-1].stmt); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]);}
        break;
      case 65: // StateBodyItem -> EXIT, StmtBlock
#line 269 "parser.y"
{ CurrentSemanticValue.node = new ExitFunction((DSLBlock)ValueStack[ValueStack.Depth-1].stmt); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]);}
        break;
      case 66: // StateBodyItem -> DEFER, NonDefaultEventList, SEMICOLON
#line 270 "parser.y"
{ CurrentSemanticValue.node = new Defer(ValueStack[ValueStack.Depth-2].slst); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 67: // StateBodyItem -> IGNORE, NonDefaultEventList, SEMICOLON
#line 271 "parser.y"
{ CurrentSemanticValue.node = new Ignore(ValueStack[ValueStack.Depth-2].slst); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);}
        break;
      case 68: // StateBodyItem -> ON, EventList, GOTO, ID, SEMICOLON
#line 272 "parser.y"
{ CurrentSemanticValue.node = new Transition(ValueStack[ValueStack.Depth-4].slst, ValueStack[ValueStack.Depth-2].s); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);}
        break;
      case 69: // StateBodyItem -> ON, EventList, PUSH, ID, SEMICOLON
#line 273 "parser.y"
{ CurrentSemanticValue.node = new CallTransition(ValueStack[ValueStack.Depth-4].slst, ValueStack[ValueStack.Depth-2].s); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);}
        break;
      case 70: // StateBodyItem -> ON, EventList, DO, ID, SEMICOLON
#line 274 "parser.y"
{ CurrentSemanticValue.node = new Action(ValueStack[ValueStack.Depth-4].slst, ValueStack[ValueStack.Depth-2].s); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);}
        break;
      case 71: // Stmt -> IF, Exp, Stmt, ELSE, Stmt
#line 281 "parser.y"
{ CurrentSemanticValue.stmt = new DSLITE(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 72: // Stmt -> IF, Exp, Stmt
#line 282 "parser.y"
{ CurrentSemanticValue.stmt = new DSLITE(ValueStack[ValueStack.Depth-2].exp, ValueStack[ValueStack.Depth-1].stmt, new DSLSkip()); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 73: // Stmt -> WHILE, Exp, Stmt
#line 283 "parser.y"
{ CurrentSemanticValue.stmt = new DSLWhile(ValueStack[ValueStack.Depth-2].exp, ValueStack[ValueStack.Depth-1].stmt); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 74: // Stmt -> Exp, ASSIGN, Exp, SEMICOLON
#line 284 "parser.y"
{ CurrentSemanticValue.stmt = new DSLAssign(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 75: // Stmt -> StmtBlock
#line 285 "parser.y"
{ CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
        break;
      case 76: // Stmt -> ASSERT, LPAREN, Exp, RPAREN, SEMICOLON
#line 286 "parser.y"
{ CurrentSemanticValue.stmt = new DSLAssert(ValueStack[ValueStack.Depth-3].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 77: // Stmt -> SEND, LPAREN, Exp, COMMA, Exp, OptionalLastArg, RPAREN, SEMICOLON
#line 287 "parser.y"
{ CurrentSemanticValue.stmt = new DSLSend(ValueStack[ValueStack.Depth-6].exp, ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-3].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-8], LocationStack[LocationStack.Depth-1]); }
        break;
      case 78: // Stmt -> SCALL, LPAREN, Exp, RPAREN, SEMICOLON
#line 288 "parser.y"
{ CurrentSemanticValue.stmt = new DSLSCall(ValueStack[ValueStack.Depth-3].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 79: // Stmt -> RAISE, LPAREN, Exp, OptionalLastArg, RPAREN, SEMICOLON
#line 289 "parser.y"
{ CurrentSemanticValue.stmt = new DSLRaise(ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-3].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-6], LocationStack[LocationStack.Depth-1]); }
        break;
      case 80: // Stmt -> FFCall, SEMICOLON
#line 290 "parser.y"
{ CurrentSemanticValue.stmt = new DSLFFCallStmt((DSLFFCall)ValueStack[ValueStack.Depth-2].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 81: // Stmt -> RETURN, ExpOrNull, SEMICOLON
#line 291 "parser.y"
{ CurrentSemanticValue.stmt = new DSLReturn(ValueStack[ValueStack.Depth-2].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 82: // Stmt -> LEAVE, SEMICOLON
#line 292 "parser.y"
{ CurrentSemanticValue.stmt = new DSLLeave(); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 83: // Stmt -> SEMICOLON
#line 293 "parser.y"
{ CurrentSemanticValue.stmt = new DSLSkip(); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-1]); }
        break;
      case 84: // Stmt -> DELETE, SEMICOLON
#line 294 "parser.y"
{ CurrentSemanticValue.stmt = new DSLDelete(); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 85: // Stmt -> Exp, Args, SEMICOLON
#line 295 "parser.y"
{ if (!(ValueStack[ValueStack.Depth-3].exp is DSLMember)) {
#line 296 "parser.y"
																					Scanner.yyerror(string.Format("Invalid Expression: '{0}'. Expected function name or variable size container mutation", ValueStack[ValueStack.Depth-3].s));
#line 297 "parser.y"
																				  } else {
#line 298 "parser.y"
																					var op = (ValueStack[ValueStack.Depth-3].exp as DSLMember).member;
#line 299 "parser.y"
																					var baseE = (ValueStack[ValueStack.Depth-3].exp as DSLMember).baseExp;
#line 300 "parser.y"
																					CurrentSemanticValue.stmt = new DSLMutation(baseE, op, (DSLTuple)ValueStack[ValueStack.Depth-2].exp); setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);
#line 301 "parser.y"
																				  }
#line 302 "parser.y"
																				}
        break;
      case 86: // OptionalLastArg -> COMMA, Exp
#line 306 "parser.y"
{ CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-1].exp; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 87: // OptionalLastArg -> /* empty */
#line 307 "parser.y"
{ CurrentSemanticValue.exp = null; }
        break;
      case 88: // StmtList -> /* empty */
#line 311 "parser.y"
{ CurrentSemanticValue.stmtLst = new List<IDSLStmt>(); }
        break;
      case 89: // StmtList -> StmtList, Stmt
#line 312 "parser.y"
{ CurrentSemanticValue.stmtLst = new List<IDSLStmt>(); CurrentSemanticValue.stmtLst.AddRange(ValueStack[ValueStack.Depth-2].stmtLst); CurrentSemanticValue.stmtLst.Add(ValueStack[ValueStack.Depth-1].stmt); }
        break;
      case 90: // StmtBlock -> LCBRACE, StmtList, RCBRACE
#line 316 "parser.y"
{
#line 317 "parser.y"
																					var bl = new DSLBlock();
#line 318 "parser.y"
																					foreach (var stmt in ValueStack[ValueStack.Depth-2].stmtLst) {
#line 319 "parser.y"
																						bl.add(stmt);
#line 320 "parser.y"
																					}
#line 321 "parser.y"

#line 322 "parser.y"
																					CurrentSemanticValue.stmt = bl;
#line 323 "parser.y"
																					setLoc(CurrentSemanticValue.stmt, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);
#line 324 "parser.y"
																				}
        break;
      case 91: // Unary -> MINUS
#line 329 "parser.y"
{ CurrentSemanticValue.uop = Ops.U_MINUS; }
        break;
      case 92: // Unary -> LNOT
#line 330 "parser.y"
{ CurrentSemanticValue.uop = Ops.U_LNOT; }
        break;
      case 93: // Multiplicative -> MUL
#line 334 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_MUL; }
        break;
      case 94: // Multiplicative -> DIV
#line 335 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_DIV; }
        break;
      case 95: // Additive -> PLUS
#line 340 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_PLUS; }
        break;
      case 96: // Additive -> MINUS
#line 341 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_MINUS; }
        break;
      case 97: // Relational -> LT
#line 345 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_LT; }
        break;
      case 98: // Relational -> GT
#line 346 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_GT; }
        break;
      case 99: // Relational -> LE
#line 347 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_LE; }
        break;
      case 100: // Relational -> GE
#line 348 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_GE; }
        break;
      case 101: // Equality -> EQ
#line 352 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_EQ; }
        break;
      case 102: // Equality -> NE
#line 353 "parser.y"
{ CurrentSemanticValue.bop = Ops.B_NE; }
        break;
      case 104: // Exp_8 -> Exp_8, LOR, Exp_7
#line 363 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(Ops.B_LOR, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp);  setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 106: // Exp_7 -> Exp_7, LAND, Exp_6
#line 368 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(Ops.B_LAND, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 108: // Exp_6 -> MUL
#line 373 "parser.y"
{ CurrentSemanticValue.exp = new DSLId("*"); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 110: // Exp_5 -> Exp_4, Equality, Exp_4
#line 378 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(ValueStack[ValueStack.Depth-2].bop, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 112: // Exp_4 -> Exp_3, Relational, Exp_3
#line 383 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(ValueStack[ValueStack.Depth-2].bop, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 114: // Exp_3 -> Exp_3, Additive, Exp_2
#line 388 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(ValueStack[ValueStack.Depth-2].bop, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 116: // Exp_2 -> Exp_2, Multiplicative, Exp_1
#line 393 "parser.y"
{ CurrentSemanticValue.exp = new DSLBinop(ValueStack[ValueStack.Depth-2].bop, ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 118: // Exp_1 -> Unary, Exp_0
#line 398 "parser.y"
{ CurrentSemanticValue.exp = new DSLUnop(ValueStack[ValueStack.Depth-2].uop, ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 120: // Exp_0 -> Exp_0, DOT, ID
#line 403 "parser.y"
{ CurrentSemanticValue.exp = new DSLMember((IDSLExp)ValueStack[ValueStack.Depth-3].exp, ValueStack[ValueStack.Depth-1].s); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);  }
        break;
      case 121: // Exp_0 -> Exp_0, LBRACKET, Exp, RBRACKET
#line 404 "parser.y"
{ CurrentSemanticValue.exp = new DSLIndex((IDSLExp)ValueStack[ValueStack.Depth-4].exp, ValueStack[ValueStack.Depth-2].exp);  setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 122: // Exp_0 -> BaseId
#line 405 "parser.y"
{ CurrentSemanticValue.exp = new DSLId(ValueStack[ValueStack.Depth-1].s); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 123: // Exp_0 -> INT
#line 406 "parser.y"
{ CurrentSemanticValue.exp = new DSLInt(Convert.ToInt32(ValueStack[ValueStack.Depth-1].s)); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 127: // Exp_0 -> LPAREN, Exp, RPAREN
#line 410 "parser.y"
{ CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].exp; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 131: // Exp_0 -> SIZEOF, LPAREN, Exp, RPAREN
#line 414 "parser.y"
{ CurrentSemanticValue.exp = new DSLSizeof(ValueStack[ValueStack.Depth-2].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 132: // Arg -> LPAREN, Type, RPAREN, PayloadKw
#line 418 "parser.y"
{ CurrentSemanticValue.exp = new DSLArg(ValueStack[ValueStack.Depth-3].type); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 133: // Arg -> PayloadKw
#line 419 "parser.y"
{ CurrentSemanticValue.exp = new DSLArg(null); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 136: // ExpList -> Exp
#line 427 "parser.y"
{ var t = new DSLTuple(); t.add(ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 137: // ExpList -> ExpList, COMMA, Exp
#line 428 "parser.y"
{ var t = (DSLTuple) ValueStack[ValueStack.Depth-3].exp; t.add(ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 138: // Tuple -> LPAREN, Exp, COMMA, RPAREN
#line 432 "parser.y"
{ var t = new DSLTuple(); t.add(ValueStack[ValueStack.Depth-3].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-4], LocationStack[LocationStack.Depth-1]); }
        break;
      case 139: // Tuple -> LPAREN, Exp, COMMA, ExpList, RPAREN
#line 433 "parser.y"
{ var t = (DSLTuple) ValueStack[ValueStack.Depth-2].exp; t.prepend(ValueStack[ValueStack.Depth-4].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 140: // NamedExpList -> ID, ASSIGN, Exp
#line 437 "parser.y"
{ var t = new DSLNamedTuple(); t.append(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 141: // NamedExpList -> ID, ASSIGN, Exp, COMMA, NamedExpList
#line 438 "parser.y"
{ var t = (DSLNamedTuple) ValueStack[ValueStack.Depth-1].exp; t.prepend(ValueStack[ValueStack.Depth-5].s, ValueStack[ValueStack.Depth-3].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]); }
        break;
      case 142: // NamedTuple -> LPAREN, NamedExpList, RPAREN
#line 442 "parser.y"
{ CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].exp; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 144: // ExpOrNull -> /* empty */
#line 447 "parser.y"
{ CurrentSemanticValue.exp = null; }
        break;
      case 145: // NewExp -> NEW, ID, KWArgs
#line 451 "parser.y"
{ CurrentSemanticValue.exp = new DSLNew(ValueStack[ValueStack.Depth-2].s, (DSLKWArgs) ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 146: // Bool -> TRUE
#line 454 "parser.y"
{ CurrentSemanticValue.exp = new DSLBool(true); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 147: // Bool -> FALSE
#line 455 "parser.y"
{ CurrentSemanticValue.exp = new DSLBool(false); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 148: // FFCall -> ID, Args
#line 459 "parser.y"
{CurrentSemanticValue.exp = new DSLFFCall(ValueStack[ValueStack.Depth-2].s, (DSLTuple)ValueStack[ValueStack.Depth-1].exp); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 149: // KWArgList -> ID, ASSIGN, Exp
#line 463 "parser.y"
{ var t = new DSLKWArgs(); t.set(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]);  }
        break;
      case 150: // KWArgList -> ID, ASSIGN, Exp, COMMA, KWArgList
#line 464 "parser.y"
{ var t = (DSLKWArgs)ValueStack[ValueStack.Depth-1].exp; t.set(ValueStack[ValueStack.Depth-5].s, ValueStack[ValueStack.Depth-3].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-5], LocationStack[LocationStack.Depth-1]);  }
        break;
      case 151: // KWArgs -> LPAREN, KWArgList, RPAREN
#line 468 "parser.y"
{ CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].exp; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 152: // KWArgs -> LPAREN, RPAREN
#line 469 "parser.y"
{ CurrentSemanticValue.exp = new DSLKWArgs(); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 153: // Args -> LPAREN, ArgList, RPAREN
#line 473 "parser.y"
{ CurrentSemanticValue.exp = ValueStack[ValueStack.Depth-2].exp; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 154: // Args -> LPAREN, RPAREN
#line 474 "parser.y"
{ CurrentSemanticValue.exp = new DSLTuple(); setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-2], LocationStack[LocationStack.Depth-1]); }
        break;
      case 155: // ArgList -> Exp
#line 478 "parser.y"
{ var t = new DSLTuple(); t.prepend(ValueStack[ValueStack.Depth-1].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-1]); }
        break;
      case 156: // ArgList -> Exp, COMMA, ArgList
#line 479 "parser.y"
{ var t = (DSLTuple)ValueStack[ValueStack.Depth-1].exp; t.prepend(ValueStack[ValueStack.Depth-3].exp); CurrentSemanticValue.exp = t; setLoc(CurrentSemanticValue.exp, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
      case 162: // Attribute -> LCBRACE, ID, RCBRACE
#line 491 "parser.y"
{ CurrentSemanticValue.node = new DSLAttribute(ValueStack[ValueStack.Depth-2].s); setLoc(CurrentSemanticValue.node, LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((PTokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PTokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
