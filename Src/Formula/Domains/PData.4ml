domain FuncData
{        
    /*************************************************************/
    /****************          Type Language          ************/
    /*************************************************************/    
       
    //// The basic type id accepts any machine.
    MachType        ::= new (name: String).
    TypePrimitive   ::= { BOOL, INT, EVENT, ID, MID, SID }.
    TypeTuple       ::= new (hd: any AllTypes, tl: any TypeTuple + { NIL }).
    TypeField       ::= new (name: any String, type: any AllTypes).
    TypeNamedTuple  ::= new (hd: any TypeField, tl: any TypeNamedTuple + { NIL }).
    TypeSeq         ::= new (x: any AllTypes).
    TypeMap         ::= new (k: any AllTypes, v: any AllTypes).
    AllTypes        ::= TypePrimitive + TypeTuple + TypeNamedTuple + TypeSeq + TypeMap + { ANY }.
    
    /*************************************************************/
    /****************    Entry Functions Language     ************/
    /*************************************************************/    
                               
    //// Expressions
    Use    ::= new (name: String, kind: { STATE, EVENT, VAR, FIELD }).
    Apply  ::= new (op: { NOT, NEG, ADD, SUB, MUL, INTDIV, AND, OR, EQ, NEQ, LT, LE, GT, GE, IDX, FLD, IN, KEYS, SIZEOF }, args: any Exprs).
    Call   ::= new (name: String, args: any Exprs + { NIL }).
    Exprs  ::= new (head: any Expr, tail: any Exprs + { NIL }).              
    New    ::= new (type: any MachType, arg: any Expr + { NIL }).
    NamedExprs  ::= new (var: String, exp: any Expr, tail: any NamedExprs + { NIL }).
    Payload    ::= new (kind: AllTypes + { NIL }).
    Tuple  ::= new (body: any Exprs).
    NamedTuple ::= new (body: any NamedExprs).
    Sequence ::= new (body: any Exprs).
    Map    ::= new (body: any Exprs).
    Expr   ::= Use + Tuple + NamedTuple + Map + Sequence + New + Call + Apply + Payload + Integer + Boolean + { THIS, TRIGGER, NONDET, NULL }.
    
    //// Statements
    DataOp ::= new (op: { UPDATE, INSERT, REMOVE }, args: any Exprs).
    Assert ::= new (expr: any Expr).
    Return ::= new (expr: any Expr + { NIL }).
    Assign ::= new (lhs: any Expr, rhs: any Expr).
    Send   ::= new (target: any Expr, event: any Expr, payload: any Expr + { NIL }).
    Raise  ::= new (ev: any Expr, payload: any Expr + { NIL }).
    Scall  ::= new (state: any Expr).
    Strings ::= new (str: any String, tail: any Strings + { NIL }).
    Ecall  ::= new (names: any Strings, args: any Exprs + { NIL }).
    ITE    ::= new (cond: any Expr, true: any Stmt, false: any Stmt).
    While  ::= new (cond: any Expr, body: any Stmt).
    Seq    ::= new (s1: any Stmt, s2: any Stmt).
    Stmt   ::= DataOp + Assert + Return + Assign + Send + Raise + Scall + ITE + Call + While + Seq + Ecall + { NIL, LEAVE, DELETE }.
}

domain PData extends FuncData
{
    /*************************************************************/
    /****************       Core Entities            *************/
    /*************************************************************/

    MachineDecl ::= fun (name: String -> type: { REAL, MODEL, SPEC }, maxQueueSize: Integer + { NIL }).

    EventDecl ::= fun (name: String -> any AssumeMaxInstances + AssertMaxInstances + { NIL }, payloadType: AllTypes + { NIL }).    
    AssumeMaxInstances ::= new (bound: Integer).
    AssertMaxInstances ::= new (bound: Integer).

    ActionDecl ::= fun (name: String, owner: MachineDecl -> body: any Stmt).

    StateDecl ::= fun (name: String, 
                       owner: MachineDecl -> 
                       entryFun: any Stmt, 
                       defers: EventSetDecl + { NIL }).

    Stable  ::= new (state: StateDecl).

    ExitFun ::= fun (state: StateDecl -> exitFun: any Stmt).
    
    Install ::= fun (state: StateDecl, event: EventDecl -> action: ActionDecl).
           
    VarDecl ::= fun (name: String, owner: MachineDecl -> type: any AllTypes, isGhost: Boolean).
    
    TransDecl ::= fun (src: StateDecl, trig: EventDecl + { DEFAULT } -> dst: StateDecl, isPush: Boolean).

    Fair    ::= new (MachineDecl + TransDecl).
    
    FunDecl ::= fun (name: String,
                     owner: MachineDecl ->
                     params: any Params + { NIL }, 
                     return: any AllTypes + { NIL },
                     isModel: Boolean,
                     body: any Stmt).
    Params  ::= new (name: String, type: AllTypes, tail: any Params + { NIL }).    
    
    /*************************************************************/
    /****************       Named Sets               *************/
    /*************************************************************/
    
    StateSetDecl ::= new (name: String, owner: MachineDecl).    
    InStateSet   ::= new (set: StateSetDecl, state: StateDecl).
           
    EventSetDecl ::= new (name: String, owner: MachineDecl).    
    InEventSet   ::= new (set: EventSetDecl, event: EventDecl).
               
        
    /*************************************************************/
    /****************       Core Descriptors         *************/
    /*************************************************************/    
    
    MainDecl ::= new (main: any New).
        
    //// This is a mapping from machine types to start states.
    MachStart ::= fun (mach: MachineDecl => state: StateDecl).
               
    //// These are flags to control execution of machines by the runtime.    
    Flags ::= new (entity: FunDecl, flag: { PASSIVE }).                
    
    /*************************************************************/
    /****************          Labels                *************/
    /*************************************************************/    
       
    //// Allows an integer labeled to be attached to any P construct.       
    Label ::= fun (data: any PData.Data -> id: Integer).
        
    /*************************************************************/
    /****************       Static Semantics         *************/
    /*************************************************************/    
    
    StaticError ::= (code: Integer, msg: String, blame: PData.Data).    
    DisplayName ::= (kind: PData.Constant, name: String).    
    DisplayName(#ActionDecl  , " action "       ).
    DisplayName(#EventDecl   , " event "        ).
    DisplayName(#EventSetDecl, " event set "    ).
    DisplayName(#ExitFun     , " exit function ").
    DisplayName(#FunDecl     , " function "     ).
    DisplayName(#InEventSet  , " in event set " ).                      
    DisplayName(#Install     , " install "      ).     
    DisplayName(#InStateSet  , " in state set " ).         
    DisplayName(#MachineDecl , " machine type " ).
    DisplayName(#MachStart   , " machine start ").
    DisplayName(#StateDecl   , " state "        ).
    DisplayName(#StateSetDecl, " state set "    ).   
    DisplayName(#TransDecl   , " transition "   ).
    DisplayName(#VarDecl     , " variable "     ).
                  
    /*************************************************************/
    /****************      Undeclared Entities       *************/
    /*************************************************************/           
    Undeclared ::= (usage: PData.Data, decl: PData.Data, context: String).
    
    Undeclared(decl, decl', context) :- 
                                 context = "owner",
                                 decl is PData.Any,
                                 decl.owner = decl',
                                 no { x | x is PData.Any, x = decl' };
                                 
                                 context = "mach",
                                 decl is PData.Any,
                                 decl.mach = decl',
                                 no { x | x is PData.Any, x = decl' };
                                     
                                 context = "defers",
                                 decl is PData.Any,
                                 decl.defers = decl',
                                 decl' : EventSetDecl,
                                 no { x | x is PData.Any, x = decl' };
                                 
                                 context = "state",
                                 decl is PData.Any,
                                 decl.state = decl',
                                 no { x | x is PData.Any, x = decl' };                                 
                                 
                                 context = "event",
                                 decl is PData.Any,
                                 decl.event = decl',
                                 no { x | x is PData.Any, x = decl' };                                 
                                 
                                 context = "set",
                                 decl is PData.Any,
                                 decl.set = decl',
                                 no { x | x is PData.Any, x = decl' };     
                                                                                              
                                 context = "src",
                                 decl is PData.Any,
                                 decl.src = decl',
                                 no { x | x is PData.Any, x = decl' };     
                                 
                                 context = "dst",
                                 decl is PData.Any,
                                 decl.dst = decl',
                                 no { x | x is PData.Any, x = decl' };                                      
                                 
                                 context = "trig",
                                 decl is PData.Any,
                                 decl.trig = decl',
                                 decl' : EventDecl,
                                 no { x | x is PData.Any, x = decl' }.         
                                 
    StaticError(1, msg, blame) :-
                                 Undeclared(blame, decl, context),
                                 DisplayName(toSymbol(blame), blame_kind_name),
                                 DisplayName(toSymbol(decl), decl_kind_name),                                  
                                 msg = strJoin(
                                            strJoin("Undefined", strJoin(decl_kind_name, decl.name)),
                                            strJoin(" in", strJoin(blame_kind_name, strJoin("at ", context)))).                                 
                                                                                                                  
                                                                                                                                         
}

