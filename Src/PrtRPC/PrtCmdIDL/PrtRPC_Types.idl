[
	uuid(1397cac6-51ca-4c50-9484-1afd1c353d84),
	version(1.0),
	pointer_default(ptr)
]
interface PrtRPC {
	/** PRT_INT32 is always a 32-bit signed integer. */
	typedef signed __int32 PRT_INT32;
	/** PRT_INT64 is always a 64-bit signed integer. */
	typedef signed __int64 PRT_INT64;

	/** PRT_CHAR is always an ASCII character. */
	typedef char PRT_CHAR;
	/** PRT_STRING is always an array of ASCII characters. */
	typedef [string] char * PRT_STRING;

	/** PRT_CSTRING is always a constant array of ASCII characters. */
	typedef char const * PRT_CSTRING;

	/** PRT_HANDLE is always a type s.t. sizeof(PRT_HANDLE) >= sizeof(void*). */
	typedef void * PRT_HANDLE;

	/** These are the kinds of types in the P type system. */
	typedef enum {
		PRT_KIND_ANY = 0,   /**< The kind of the `any` type        */
		PRT_KIND_BOOL = 1,   /**< The kind of the `bool` type       */
		PRT_KIND_EVENT = 2,   /**< The kind of the `event` type      */
		PRT_KIND_FORGN = 3,   /**< The kind of all foreign types     */
		PRT_KIND_ID = 4,   /**< The kind of the `id` type         */
		PRT_KIND_INT = 5,   /**< The kind of the `int` type        */
		PRT_KIND_MAP = 6,   /**< The kind of all map types         */
		PRT_KIND_MID = 7,   /**< The kind of the `mid` type        */
		PRT_KIND_NMDTUP = 8,   /**< The kind of all named tuple types */
		PRT_KIND_SEQ = 9,   /**< The kind of all sequence types    */
		PRT_KIND_TUPLE = 10,  /**< The kind of all tuple types       */
		PRT_TYPE_KIND_COUNT = 11,   /**< The number of type kinds        */
		PRT_TYPE_KIND_CANARY = 0xFF /**< A freed type will have this as its kind */
	} PRT_TYPE_KIND;

	typedef union switch (PRT_TYPE_KIND typeKind) type_details{
	case PRT_KIND_ANY:
	case PRT_KIND_BOOL:
	case PRT_KIND_EVENT:
	case PRT_KIND_FORGN:
	case PRT_KIND_ID:
	case PRT_KIND_INT:
	case PRT_KIND_MAP: struct PRT_MAPTYPE* mapT;
	case PRT_KIND_MID:
	case PRT_KIND_NMDTUP: struct PRT_NMDTUPTYPE* nmTupleT;
	case PRT_KIND_SEQ: struct PRT_SEQTYPE* seqT;
	case PRT_KIND_TUPLE: struct PRT_TUPTYPE* tupleT;
	} PRT_TYPE;
	/** A value is a pointer to a type expression*/
	typedef PRT_TYPE *PRT_VALUE;

	/** A primitive value is primitive type paired with a primitive value. */
	typedef enum {
		_bool, _event, _integer, _id, _mid
	} typesInP;


	typedef union switch (typesInP type) val {
	case _bool: boolean bl;
	case _event: PRT_INT32  ev;
	case _integer: PRT_INT32   nt;
	case _id: PRT_INT64  id;
	case _mid: PRT_INT64  mid;
	} PrimVale;

	typedef struct PRT_PRIMVALUE
	{
		PRT_TYPE type;        /**< Must be a primitive type. */
		PrimVale value;              /**< A primitive value is one of the above. */
	} PRT_PRIMVALUE;

	/** The layout for map types. */
	typedef struct PRT_MAPTYPE
	{
		PRT_TYPE      domType;   /**< The domain type of the map type */
		PRT_TYPE      codType;   /**< The codomain type of the map type */
	} PRT_MAPTYPE;

	/** The layout for named tuple types. */
	typedef struct PRT_NMDTUPTYPE
	{
		PRT_INT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_STRING    *fieldNames;   /**< Array of valid field names; length = arity */
		PRT_TYPE      *fieldTypes;   /**< Array of field types; length = arity */
	} PRT_NMDTUPTYPE;

	/** The layout for sequence types. */
	typedef struct PRT_SEQTYPE
	{
		PRT_TYPE      innerType;  /**< Inner type of the sequence */
	} PRT_SEQTYPE;

	/** The layout for tuple types. */
	typedef struct PRT_TUPTYPE
	{
		PRT_INT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_TYPE      *fieldTypes;   /**< Array of field types; length = arity */
	} PRT_TUPTYPE;

	/** Structure for representing a standard GUID */
	typedef struct PRT_GUID
	{
		PRT_INT32 data1;   /**< 0 First data field (32 bits)  */
		PRT_INT32 data2;   /**< 0 Second data field (16 bits) */
		PRT_INT32 data3;   /**< 0 Third data field (16 bits)  */
		PRT_INT64 data4;   /**< 0 Fourth data field (64 bits) */
	} PRT_GUID;

	/** A tuple value is a (named) tuple represented as an array. */
	typedef struct PRT_TUPVALUE
	{
		PRT_TYPE   type;     /**< Must be a (named) tuple type. */
		PRT_VALUE *values;   /**< Is an array of tuple args.    */
	} PRT_TUPVALUE;

	/** A sequence value is a sequence represented as a dynamic array. */
	typedef struct PRT_SEQVALUE
	{
		PRT_TYPE   type;     /**< Must be a sequence type.                */
		PRT_INT32 size;     /**< The number of elements in the sequence. */
		PRT_INT32 capacity; /**< The number of elements before resizing  */
		PRT_VALUE *values;   /**< An array of values in the sequence.     */
	} PRT_SEQVALUE;

	/** A map value is represented as a hash-table. */
	typedef struct PRT_MAPVALUE
	{
		PRT_TYPE     type;       /**< Must be a map type.                     */
		PRT_INT32   size;       /**< The number of elements in the map.      */
		PRT_INT32   capNum;     /**< An opaque number related to the number of buckets */
		struct PRT_MAPNODE *first;    /**< First element inserted into the map. */
		struct PRT_MAPNODE *last;     /**< Last element inserted into the map. */
		struct PRT_MAPNODE **buckets; /**< An array of pointers to chained nodes.  */
	} PRT_MAPVALUE;

	/** A key-value node of a map. */
	typedef struct PRT_MAPNODE
	{
		PRT_VALUE key;     /**< The key of this node. */
		PRT_VALUE value;   /**< The value of this node. */
		struct PRT_MAPNODE *bucketNext;   /**< The next node in this bucket.         */
		struct PRT_MAPNODE *insertNext;   /**< The next node in insertion order.     */
		struct PRT_MAPNODE *insertPrev;   /**< The previous node in insertion order. */
	} PRT_MAPNODE;

	void SendValue1(
		[in] handle_t handleM,
		[in] PRT_PRIMVALUE* value
		);
	void SendValue2(
		[in] handle_t handleM,
		[in] PRT_PRIMVALUE* value
		);

	void SendValueMap1(
		[in] handle_t handleM,
		[in] PRT_MAPVALUE* value
		);

	void SendValueMap2(
		[in] handle_t handleM,
		[in] PRT_MAPVALUE* value
		);

};