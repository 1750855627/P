[
	uuid(1397cac6-51ca-4c50-9484-1afd1c353d84),
	version(1.0),
	pointer_default(ptr)
]
interface PrtDistributed {
/** Declare all the typedefs **/
	typedef enum _PRT_TYPE_KIND PRT_TYPE_KIND;

	typedef struct _PRT_TYPE PRT_TYPE;

	typedef struct _PRT_MAPTYPE PRT_MAPTYPE;

	typedef struct _PRT_NMDTUPTYPE PRT_NMDTUPTYPE;

	typedef struct _PRT_SEQTYPE PRT_SEQTYPE;

	typedef struct _PRT_TUPTYPE PRT_TUPTYPE;

	typedef struct _PRT_FORGNTYPE PRT_FORGNTYPE;

	/** Declare all the platform dependent types */
	/** PRT_UINT8 is always an 8-bit unsigned integer. */
	typedef unsigned small  PRT_UINT8;
	/** PRT_UINT16 is always a 16-bit unsigned integer. */
	typedef unsigned short PRT_UINT16;
	/** PRT_UINT32 is always a 32-bit unsigned integer. */
	typedef unsigned long PRT_UINT32;
	/** PRT_UINT64 is always a 64-bit unsigned integer. */
	typedef unsigned long long PRT_UINT64;

	/** PRT_INT8 is always an 8-bit signed integer. */
	typedef signed small  PRT_INT8;
	/** PRT_INT16 is always a 16-bit signed integer. */
	typedef signed short PRT_INT16;
	/** PRT_INT32 is always a 32-bit signed integer. */
	typedef signed long PRT_INT32;
	/** PRT_INT64 is always a 64-bit signed integer. */
	typedef signed long long PRT_INT64;

	/** PRT_CHAR is always an ASCII character. */
	typedef char PRT_CHAR;
	/** PRT_STRING is always an array of ASCII characters. */
	typedef char * PRT_STRING;
	/** PRT_CSTRING is always a constant array of ASCII characters. */
	typedef char const * PRT_CSTRING;

	/** These are the kinds of types in the P type system. */
	enum _PRT_TYPE_KIND
	{
		PRT_KIND_ANY = 0,   /**< The kind of the `any` type        */
		PRT_KIND_BOOL = 1,   /**< The kind of the `bool` type       */
		PRT_KIND_EVENT = 2,   /**< The kind of the `event` type      */
		PRT_KIND_FORGN = 3,   /**< The kind of all foreign types     */
		PRT_KIND_MACHINE = 4,   /**< The kind of the `MACHINE` type         */
		PRT_KIND_INT = 5,   /**< The kind of the `int` type        */
		PRT_KIND_MAP = 6,   /**< The kind of all map types         */
		PRT_KIND_MODEL = 7,   /**< The kind of the `MODEL` type        */
		PRT_KIND_NMDTUP = 8,   /**< The kind of all named tuple types */
		PRT_KIND_NULL = 9,	   /**< The kind of the `NULL` type		  */
		PRT_KIND_SEQ = 10,   /**< The kind of all sequence types    */
		PRT_KIND_TUPLE = 11,  /**< The kind of all tuple types       */
		PRT_TYPE_KIND_COUNT = 12,   /**< The number of type kinds        */
		PRT_TYPE_KIND_CANARY = 0xFF /**< A freed type will have this as its kind */
	};


	/** A type is expressed as a discriminicated union of all types */
	struct _PRT_TYPE {
		PRT_TYPE_KIND typeKind;
		union {
			PRT_MAPTYPE* map;			/**< MAP type		*/
			PRT_NMDTUPTYPE* nmTuple;	/**< Named Tuple type		*/
			PRT_SEQTYPE* seq;			/**< Sequence type		*/
			PRT_TUPTYPE* tuple;			/**< Tuple type		*/
			PRT_FORGNTYPE* forgn;		/**< Foreign type		*/
		} type_union;
	};

	/** The layout for map types. */
	struct _PRT_MAPTYPE
	{
		PRT_TYPE      domType;   /**< The domain type of the map type */
		PRT_TYPE      codType;   /**< The codomain type of the map type */
	};

	/** The layout for named tuple types. */
	struct _PRT_NMDTUPTYPE
	{
		PRT_UINT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_STRING    *fieldNames;   /**< Array of valid field names; length = arity */
		PRT_TYPE      *fieldTypes;   /**< Array of field types; length = arity */
	};

	/** The layout for sequence types. */
	struct _PRT_SEQTYPE
	{
		PRT_TYPE      innerType;  /**< Inner type of the sequence */
	};

	/** The layout for tuple types. */
	struct _PRT_TUPTYPE
	{
		PRT_UINT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_TYPE      *fieldTypes;   /**< Array of field types; length = arity */
	};

	/** Structure for representing a standard GUID */
	typedef struct PRT_GUID
	{
		PRT_UINT32 data1;   /**< 0 First data field (32 bits)  */
		PRT_UINT16 data2;   /**< 0 Second data field (16 bits) */
		PRT_UINT16 data3;   /**< 0 Third data field (16 bits)  */
		PRT_UINT64 data4;   /**< 0 Fourth data field (64 bits) */
	} PRT_GUID;


	/** The PRT_FORGN_CLONE function is called whenever a foreign value needs to be cloned.
	*   The cloning semantics depends on the memory management strategy of the client.
	*   @see PRT_PRT_FORGN_FREE
	*/
	typedef void*(*PRT_FORGN_CLONE)(PRT_GUID typeTag, void *frgnVal);

	/** The PRT_FORGN_FREE function is called whenever a foreign value will never be used again.
	*   The semantics of PRT_FORGN_FREE depends on the memory management strategy of the client.
	*   @see PRT_FORGN_CLONE
	*/
	typedef void(*PRT_FORGN_FREE)(PRT_GUID typeTag, void *frgnVal);

	/** The PRT_FORGN_GETHASHCODE function is called to get a hashcode for a foreign value.
	*   The semantics depends of the client's definition of value equality. If two values
	*   are equal, then the function must return the same hashcode.
	*   @see PRT_FORGN_GETHASHCODE
	*/
	typedef PRT_UINT32(*PRT_FORGN_GETHASHCODE)(PRT_GUID typeTag, void *frgnVal);

	/** The PRT_FORGN_ISEQUAL function tests if two values are equal.
	*   Equality semantics is determined by the client. If two values
	*   are equal, then they should also have the same hashcode.
	*   @see PRT_FORGN_GETHASHCODE
	*/
	typedef PRT_BOOLEAN(*PRT_FORGN_ISEQUAL)(
		 PRT_GUID typeTag1,
		 void *frgnVal1,
		 PRT_GUID typeTag2,
		 void *frgnVal2);

	/** The layout for foreign types */
	struct _PRT_FORGNTYPE
	{
		PRT_GUID              typeTag;    /**< A non-zero GUID used by the client to tag the foreign types of values */
		PRT_FORGN_CLONE       cloner;     /**< Clones foreign values */
		PRT_FORGN_FREE        freer;      /**< Frees foreign values */
		PRT_FORGN_GETHASHCODE hasher;     /**< Hashes foreign values */
		PRT_FORGN_ISEQUAL     eqTester;   /**< Tests foreign values for equality */
	};

}
