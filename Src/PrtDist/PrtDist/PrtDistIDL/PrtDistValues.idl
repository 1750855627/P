[
uuid(0b531b5c-81a2-4710-a356-4fceb6d36a47),
version(1.0),
pointer_default(ptr)
]
interface PrtDistValues
{
	import "PrtDistTypes.idl";

	/***********************************************************************************************/
	//		Values
	/***********************************************************************************************/
	typedef struct _PRT_VALUE PRT_VALUE;

	typedef struct _PRT_FORGNVALUE PRT_FORGNVALUE;

	typedef struct _PRT_TUPVALUE PRT_TUPVALUE;

	typedef struct _PRT_SEQVALUE PRT_SEQVALUE;

	typedef struct _PRT_MAPVALUE PRT_MAPVALUE;

	typedef struct _PRT_MAPNODE PRT_MAPNODE;

	typedef struct _PRT_VALUE_NODE PRT_VALUE_NODE;

	typedef enum _PRT_VALUE_KIND PRT_VALUE_KIND;

	typedef enum _PRT_PRIMVALUE_KIND PRT_PRIMVALUE_KIND;

	enum _PRT_PRIMVALUE_KIND {

		PRT_KIND_BOOLVALUE,
		PRT_KIND_EVENTVALUE,
		PRT_KIND_MACHINEVALUE,
		PRT_KIND_MODELVALUE,
		PRT_KIND_INTVALUE, 
		PRT_KIND_NULLVALUE
	};

	typedef union switch (PRT_PRIMVALUE_KIND discriminator) value{
	case PRT_KIND_BOOLVALUE: PRT_BOOLEAN bl;
	case PRT_KIND_EVENTVALUE: PRT_UINT32  ev;
	case PRT_KIND_MACHINEVALUE: PRT_UINT32  mach;
	case PRT_KIND_MODELVALUE: PRT_UINT32  model;
	case PRT_KIND_INTVALUE: PRT_INT32   nt;
	} PRT_PRIMVALUE;


	enum _PRT_VALUE_KIND {
		PRT_KIND_PRIMVALUE,
		PRT_KIND_FORGNVALUE,
		PRT_KIND_MAPVALUE,
		PRT_KIND_SEQVALUE,
		PRT_KIND_TUPVALUE
	};

	struct _PRT_VALUE {
		PRT_TYPE type;
		union switch (PRT_VALUE_KIND discriminator) valueUnion{
		case PRT_KIND_PRIMVALUE: [unique] PRT_PRIMVALUE *primValue;
		case PRT_KIND_FORGNVALUE: [unique] PRT_FORGNVALUE *frgn;
		case PRT_KIND_MAPVALUE: [unique] PRT_MAPVALUE *map;
		case PRT_KIND_SEQVALUE: [unique] PRT_SEQVALUE *seq;
		case PRT_KIND_TUPVALUE: [unique] PRT_TUPVALUE *tuple;
		};
	};

	/** A foreign value is foreign type paired with a void *. */
	struct _PRT_FORGNVALUE
	{
#if !defined(IGNORE_FRG)
		void    *value;   /**< A pointer to the foreign value. */
#else
		int		*value;
#endif
	};

	/** A tuple value is a (named) tuple represented as an array. */
	struct _PRT_TUPVALUE
	{
		PRT_VALUE **values;   /**< Is an array of tuple args.    */
		PRT_VALUE_NODE *valuesSerialized;
	};


	/** A sequence value is a sequence represented as a dynamic array. */
	struct _PRT_SEQVALUE
	{
		PRT_UINT32 size;     /**< The number of elements in the sequence. */
		PRT_UINT32 capacity; /**< The number of elements before resizing  */
		PRT_VALUE **values;   /**< An array of values in the sequence.     */
		PRT_VALUE_NODE *valuesSerialized;
	};

	struct _PRT_VALUE_NODE {
		PRT_VALUE *value;
		PRT_VALUE_NODE *nextNode;
	};

	/** A map value is represented as a hash-table. */
	struct _PRT_MAPVALUE
	{
		PRT_UINT32   size;       /**< The number of elements in the map.      */
		PRT_UINT32   capNum;     /**< An opaque number related to the number of buckets */
		PRT_MAPNODE *first;    /**< First element inserted into the map. */
		PRT_MAPNODE *last;     /**< Last element inserted into the map. */
		PRT_MAPNODE **buckets; /**< An array of pointers to chained nodes.  */
	};


	/** A key-value node of a map. */
	struct _PRT_MAPNODE
	{
		PRT_VALUE *key;     /**< The key of this node. */
		PRT_VALUE *value;   /**< The value of this node. */
		PRT_MAPNODE *bucketNext;   /**< The next node in this bucket.         */
		PRT_MAPNODE *insertNext;   /**< The next node in insertion order.     */
		PRT_MAPNODE *insertPrev;   /**< The previous node in insertion order. */
	};
}
