[
   modules.P = '"P at ..\Domains\P.4ml"',
   modules.C = '"C at ..\Domains\C.4ml"'
]

transform P2CProgram (in:: P) returns (out:: C)
/*
[
    compiler_ProductivityCheck = "TypeConstant[0]"
]
*/
{
    /*************************************************************/
    /**********         Create Header File             ***********/
    /*************************************************************/
    //// Elements will be output to header file in order of position.
    HOut ::= (pos: Natural, cmp: out.Cmp).

    //// Concat elements in order.
	HConcatOut ::= (pos: Integer, cmp: out.Cmp).	
	HConcatOut(-1, NIL).
	HConcatOut(m', cmp) :- ho is HOut(_, nxt), HConcatOut(m, before), m' = toOrdinal(ho, 0, { ho' | ho' is HOut }), cmp = Section(before, nxt), m' = m + 1. 			
	out.File("_.h", cmp) :- HConcatOut(count({ho | ho is HOut}) - 1, cmp).

    /*************************************************************/
    /**********     Create C Enums for P Decls         ***********/
    /*************************************************************/
	DeclId ::= (decl: PDecl, id: Natural, cname: String).
	
	//// (1) EventDecls - Id 0, 1 are reserved for default, hault event, which can appear in transition tables.
	DeclId(d, id, cn) :- d is EventDecl, id = 2 + toOrdinal(d, 0, { d' | d' is EventDecl }), cn = strJoin("P_EVENT_", d.name).
	
	HOut(0, out.EnmDef(NIL, "P_EVENTS", list)) :- 
	   list = toList(#Elements, NIL, { enumMember | 
									   enumMember = Element(IntLit(0, DEC, NIL), "_P_EVENT_DEFAULT");
									   enumMember = Element(IntLit(1, DEC, NIL), "_P_EVENT_HALT");
									   DeclId(d, id, cn), d : EventDecl, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   enumMember = Element(IntLit(size, DEC, NIL), "_P_EVENTS_COUNT"), size = 2 + count({d | d is EventDecl}) }).  

	//// (2) MachineDecls - Start at Id 0.
	DeclId(d, id, cn) :- d is MachineDecl, id = toOrdinal(d, 0, { d' | d' is MachineDecl }), cn = strJoin("P_MACHINE_", d.name).
	
	HOut(0, out.EnmDef(NIL, "P_MACHINES", list)) :- 
	   list = toList(#Elements, NIL, { enumMember | 
									   DeclId(d, id, cn), d : MachineDecl, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   DeclId(d, id, _), d : MachineDecl, d.isMain = TRUE, enumMember = Element(IntLit(id, DEC, NIL), "_P_MACHINE_MAIN"); 
									   enumMember = Element(IntLit(size, DEC, NIL), "_P_MACHINES_COUNT"), size = count({d | d is MachineDecl}) }).  

	//// (3) VarDecls - Start at Id 0.
	DeclId(d, id, cn) :- d is VarDecl, id = toOrdinal(d, 0, { d' | d' is VarDecl, d'.owner = d.owner }), 
									   cn = strJoin("P_VAR_", strJoin(d.owner.name, strJoin("_", d.name))).
	
	HOut(0, out.EnmDef(NIL, enumName, list)) :- 
	   m is MachineDecl,
	   enumName = strJoin("P_VARS_", m.name),
	   list = toList(#Elements, NIL, { enumMember | 
									   DeclId(d, id, cn), d : VarDecl, d.owner = m, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   enumMember = Element(IntLit(size, DEC, NIL), strJoin("_P_VARS_", strJoin(m.name, "_COUNT"))), size = count({d | d is VarDecl, d.owner = m}) }).  

	//// (4) FunDecls - Start at Id 0.
	DeclId(d, id, cn) :- d is FunDecl, id = toOrdinal(d, 0, { d' | d' is FunDecl, d'.owner = d.owner }), 
									   cn = strJoin("P_FUN_", strJoin(d.owner.name, strJoin("_", d.name))).
	
	HOut(0, out.EnmDef(NIL, enumName, list)) :- 
	   m is MachineDecl,
	   enumName = strJoin("P_FUNS_", m.name),
	   list = toList(#Elements, NIL, { enumMember | 
									   DeclId(d, id, cn), d : FunDecl, d.owner = m, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   enumMember = Element(IntLit(size, DEC, NIL), strJoin("_P_FUNS_", strJoin(m.name, "_COUNT"))), size = count({d | d is FunDecl, d.owner = m}) }).  

	//// (5) AnonFunDecl - Start at Id 0.
	AnonFunDeclSub ::= sub (AnonFunDecl).

	DeclId(d, id, cn) :- AnonFunDeclSub(d), id = toOrdinal(d, 0, { d' | AnonFunDeclSub(d'), d'.owner = d.owner }), 
									   cn = strJoin("P_ANONFUN_", strJoin(d.owner.name, strJoin("_", toString(id)))).
	
	HOut(0, out.EnmDef(NIL, enumName, list)) :- 
	   m is MachineDecl,
	   enumName = strJoin("P_ANONFUNS_", m.name),
	   list = toList(#Elements, NIL, { enumMember | 
									   DeclId(d, id, cn), d : AnonFunDecl, d.owner = m, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   enumMember = Element(IntLit(size, DEC, NIL), strJoin("_P_ANONFUNS_", strJoin(m.name, "_COUNT"))), size = count({d | AnonFunDeclSub(d), d.owner = m}) }).  

	//// (6) StateDecls - Start at Id 0. Need to encode qualified names.
	DeclId(d, id, cn) :- d is StateDecl, QualName2CStr(d.name, name), 
					     id = toOrdinal(d, 0, { d' | d' is StateDecl, d'.owner = d.owner }), 
						 cn = strJoin("P_STATE_", strJoin(d.owner.name, strJoin("_", name))).
	
	HOut(0, out.EnmDef(NIL, enumName, list)) :- 
	   m is MachineDecl,
	   enumName = strJoin("P_STATES_", m.name),
	   list = toList(#Elements, NIL, { enumMember | 
									   DeclId(d, id, cn), d : StateDecl, d.owner = m, enumMember = Element(IntLit(id, DEC, NIL), cn); 
									   enumMember = Element(IntLit(size, DEC, NIL), strJoin("_P_STATES_", strJoin(m.name, "_COUNT"))), size = count({d | d is StateDecl, d.owner = m}) }).  

	//// (7) Convert qualified names to C strings
	QualNameSub ::= sub (QualifiedName).
	QualName2CStr ::= (QualifiedName, String).
	QualName2CStr(q, s) :- QualNameSub(q), q = QualifiedName(s, NIL).
	QualName2CStr(q, sj) :- QualNameSub(q), QualName2CStr(q', s'), q = QualifiedName(s, q'), sj = strJoin(s', strJoin("_", s)).

    /*************************************************************/
    /******     Generate C statics for types in program     ******/
    /*************************************************************/
	TypeExprSub ::= sub (TypeExpr).

	//// Always encode NULL and ANY types.
	TypeExprSub(in.BaseType(ANY)).
	TypeExprSub(in.BaseType(NULL)).

	//// Labels a type expression with a number greater than the labels of all its sub-expressions.
	//// TypeId linearizes the dependency order to get a schedule for emitting type expressions.
	TypeId      ::= (id: Natural, type: TypeExpr).
	TypeDepNum  ::= (id: Natural, type: TypeExpr).

	TypeDepNum(0, t) :- TypeExprSub(t), t : in.BaseType.
	TypeDepNum(i, t) :- TypeExprSub(t), t = SeqType(t'), TypeDepNum(j, t'), i = j + 1.  
	TypeDepNum(i, t) :- TypeExprSub(t), t = MapType(t', t''), TypeDepNum(j, t'), TypeDepNum(k, t''),  i = j + k + 1.  
	TypeDepNum(i, t) :- TypeExprSub(t), t = TupType(t', NIL), TypeDepNum(j, t'), i = j + 1.  
	TypeDepNum(i, t) :- TypeExprSub(t), t = TupType(t', t''), TypeDepNum(j, t'), TypeDepNum(k, t''),  i = j + k + 1.  
	TypeDepNum(i, t) :- TypeExprSub(t), t = NmdTupType(NmdTupTypeField(_, t'), NIL), TypeDepNum(j, t'), i = j + 1.  
	TypeDepNum(i, t) :- TypeExprSub(t), t = NmdTupType(NmdTupTypeField(_, t'), t''), TypeDepNum(j, t'), TypeDepNum(k, t''), i = j + k + 1.  
	TypeId(id, t) :- td is TypeDepNum(_, t), id = toOrdinal(td, 0, { td' | td' is TypeDepNum }).

	//// Build type initializers in linearization order.
	//// defs is the definitions that preceed the encoding of this type constant.
	TypeConstant ::= (type: TypeExpr + { NIL }, typeExprId: Integer, defs: out.Section + { NIL }).
	TypeConstant(NIL, -1, NIL).

	//// Base types
	BaseType2Kind ::= ({ NULL, BOOL, INT, EVENT, REAL, MODEL, FOREIGN, ANY }, String).
	BaseType2Kind(NULL, "PRT_KIND_NULL").
	BaseType2Kind(BOOL, "PRT_KIND_BOOL").
	BaseType2Kind(INT, "PRT_KIND_INT").
	BaseType2Kind(EVENT, "PRT_KIND_EVENT").
	BaseType2Kind(REAL, "PRT_KIND_MACHINE").
	BaseType2Kind(MODEL, "PRT_KIND_MODEL").
	BaseType2Kind(FOREIGN, "PRT_KIND_FORGN").
	BaseType2Kind(ANY, "PRT_KIND_ANY").
	
	TypeConstant(t, m, defs) :- TypeId(m, t), TypeConstant(_, m - 1, before), t = in.BaseType(base), BaseType2Kind(base, kind),
								              defs = out.Section(before, def),
										          def = out.VarDef(NIL, NmdType(NIL, "PRT_TYPE"), typeName, typeStruct),
								              typeName = strJoin("P_GEND_TYPE_", toString(m)),
                              typeStruct = out.Init(Args(Ident(kind), Args(Ident("NULL"), NIL))).						              

	//// Complex type Seq 
	//// (cast to PRT_MAPTYPE * is used to avoid compiler warnings when initializing union)
	TypeConstant(t, m, defs) :- TypeId(m, t), TypeConstant(_, m - 1, before), t = in.SeqType(tinner), TypeConstant(tinner, tinnerid, _),
								              defs = out.Section(Section(before, defSeq), def),
                              defSeq = out.VarDef(
                                     NIL, 
                                     NmdType(NIL, "PRT_SEQTYPE"), 
                                     typeNameSeq, 
                                     Init(Args(UnApp(ADDR, Ident(strJoin("P_GEND_TYPE_", toString(tinnerid)))), NIL))),										 
                              def = out.VarDef(
                                     NIL, 
                                     NmdType(NIL, "PRT_TYPE"), 
                                     strJoin("P_GEND_TYPE_", toString(m)), 
                                     typeStruct),
								              typeStruct = out.Init(
										              Args(Ident("PRT_KIND_SEQ"), 
											            Args(Cast(PtrType(NmdType(NIL, "PRT_MAPTYPE")), UnApp(ADDR, Ident(typeNameSeq))), 
											            NIL))),
									            typeNameSeq = strJoin("P_GEND_TYPE_SEQ_", toString(m)). 

	//// Complex type Map 
	TypeConstant(t, m, defs) :- 
	                       TypeId(m, t), TypeConstant(_, m - 1, before), t = in.MapType(tdom, tcod), 
	                       TypeConstant(tdom, domid, _), TypeConstant(tcod, codid, _),
								         defs = out.Section(Section(before, defMap), def),
										     defMap = out.VarDef(
										          NIL, 
														  NmdType(NIL, "PRT_MAPTYPE"), 
														  typeNameMap, 
														  Init(Args(UnApp(ADDR, Ident(strJoin("P_GEND_TYPE_", toString(domid)))), 
														       Args(UnApp(ADDR, Ident(strJoin("P_GEND_TYPE_", toString(codid)))), 
														       NIL)))),
										      def = out.VarDef(
										          NIL, 
														  NmdType(NIL, "PRT_TYPE"), 
														  strJoin("P_GEND_TYPE_", toString(m)), 
														  typeStruct),
							            typeStruct = out.Init(
										            Args(Ident("PRT_KIND_MAP"), 
											          Args(UnApp(ADDR, Ident(typeNameMap)), 
											          NIL))),														  
										      typeNameMap = strJoin("P_GEND_TYPE_MAP_", toString(m)).
	//// Complex type Tuple 
	Tup2ArrayInit ::= (type: TupType, arr: out.Expr). 
	Tup2ArrayInit(t, init) :- TypeExprSub(t), t = TupType(t', NIL), TypeConstant(t', _, id'), init = Init(Args(UnApp(ADDR, Ident(strJoin("P_GEND_TYPE_", toString(id')))), NIL)). 
	Tup2ArrayInit(t, init) :- TypeExprSub(t), t = TupType(t', t''), TypeConstant(t', _, id'), Tup2ArrayInit(t'', Init(ts'')), 
	                          init = Init(Args(UnApp(ADDR, Ident(strJoin("P_GEND_TYPE_", toString(id')))), ts'')). 

	TypeConstant(t, m, defs) :- 
	                       TypeId(m, t), TypeConstant(_, m - 1, before), Tup2ArrayInit(t, arrInit), t : in.TupType, 
								         defs = out.Section(Section(before, Section(defTupArr, defTup)), def),
										     defTupArr = out.VarDef(
										           NIL, 
															 ArrType(PtrType(NmdType(NIL, "PRT_TYPE")), NIL), 
															 typeNameTupArr, 
															 arrInit),
										     defTup = out.VarDef(
										          NIL, 
														  NmdType(NIL, "PRT_TUPTYPE"), 
														  typeNameTup, 
														  Init(
														    Args(IntLit(lstLength(#TupType, t), DEC, NIL), 
															  Args(Ident(typeNameTupArr), 
															  NIL)))),
										     def = out.VarDef(
										         NIL, 
													   NmdType(NIL, "PRT_TYPE"), 
													   strJoin("P_GEND_TYPE_", toString(m)), 
													   typeStruct),
							           typeStruct = out.Init(
										          Args(Ident("PRT_KIND_TUPLE"), 
											        Args(Cast(PtrType(NmdType(NIL, "PRT_MAPTYPE")), UnApp(ADDR, Ident(typeNameTup))), 
											        NIL))),
										     typeNameTupArr = strJoin("P_GEND_TYPE_TUP_ARR_", toString(m)),
										     typeNameTup = strJoin("P_GEND_TYPE_TUP_", toString(m)).

	//// Complex type NmdTuple 
	/*
	NmdTup2ArrayInit ::= (type: NmdTupType, narr: out.Expr, tarr: out.Expr). 
	NmdTup2ArrayInit(t, narr, tarr) :- TypeExprSub(t), t = NmdTupType(NmdTupTypeField(n', t'), NIL), TypeConstant(t', _, _, ts'), 
	                                   narr = Init(Args(StringLit(n', NIL), NIL)), 
	                                   tarr = Init(Args(ts', NIL)).
									    
	NmdTup2ArrayInit(t, narr, tarr) :- TypeExprSub(t), t = NmdTupType(NmdTupTypeField(n', t'), t''), TypeConstant(t', _, _, ts'), NmdTup2ArrayInit(t'', Init(n''), Init(ts'')), 
	                                   narr = Init(Args(StringLit(n', NIL), n'')), 
	                                   tarr = Init(Args(ts', ts'')). 

	TypeConstant(t, m, defs, typeStatic) :- TypeId(m, t), TypeConstant(_, m - 1, before, _), NmdTup2ArrayInit(t, narr, tarr), t : in.NmdTupType, 
								         defs = out.Section(before, Section(defNmdTupNArr, Section(defNmdTupTArr, Section(defNmdTup, def)))),
										 defNmdTupNArr = out.VarDef(
										                        NIL, 
															    ArrType(NmdType(NIL, "PRT_STRING"), NIL), 
															    typeNameNmdTupNArr, 
															    narr),
										 defNmdTupTArr = out.VarDef(
										                        NIL, 
															    ArrType(NmdType(NIL, "PRT_TYPE"), NIL), 
															    typeNameNmdTupTArr, 
															    tarr),
										 defNmdTup = out.VarDef(
										                  NIL, 
														  NmdType(NIL, "PRT_NMDTUPTYPE"), 
														  typeNameNmdTup, 
														  Init(
														    Args(IntLit(lstLength(#NmdTupType, t), DEC, NIL), 
															Args(Ident(typeNameNmdTupNArr), 
															Args(Ident(typeNameNmdTupTArr), 
															NIL))))),
										 def = out.VarDef(
										               NIL, 
													   NmdType(NIL, "PRT_TYPE"), 
													   strJoin("P_GEND_TYPE_", toString(m)), 
													   typeStatic),
							             typeStatic = out.Init(
										      Args(Ident("PRT_KIND_NMDTUP"), 
											  Args(Cast(PtrType(NmdType(NIL, "PRT_MAPTYPE")), UnApp(ADDR, Ident(typeNameNmdTup))), 
											  NIL))),
										 typeNameNmdTupTArr = strJoin("P_GEND_TYPE_NMDTUP_TARR_", toString(m)),
										 typeNameNmdTupNArr = strJoin("P_GEND_TYPE_NMDTUP_NARR_", toString(m)),
										 typeNameNmdTup = strJoin("P_GEND_TYPE_NMDTUP_", toString(m)).
    HOut(1, defs) :- TypeConstant(_, c, defs, _), defs : out.Section, c = count({ td | td is TypeId}) - 1.
    */    
    /*************************************************************/
    /******            Generate event decls                 ******/
    /*************************************************************/	
	EvDeclConcat ::= (pos: Natural, arr: out.Args + {NIL}).

	EvDecl2PayloadType ::= (EventDecl, out.Expr).
	//// An EventDecl without a payload type has a null payload type.
	EvDecl2PayloadType(d, e) :- d is EventDecl(_, _, NIL), TypeConstant(in.BaseType(NULL), typeId, _), e = Ident(strJoin("P_GEND_TYPE_", toString(typeId))).
	//// An EventDecl with a payload type refers to one of the statically generated types.
	EvDecl2PayloadType(d, e) :- d is EventDecl(_, _, type), TypeConstant(type, typeId, _), e = Ident(strJoin("P_GEND_TYPE_", toString(typeId))), type : in.TypeExpr.

	EvDecl2EvCard      ::= (EventDecl, out.Expr).
	//// An EventDecl without a queue constraint allows 2^32 - 1 events in a queue.
	EvDecl2EvCard(d, e) :- d is EventDecl(_, NIL, _), e = IntLit(4294967295, DEC, U).
	//// An EventDecl with a payload type refers to one of the statically generated types.
	EvDecl2EvCard(d, e) :- d is EventDecl(_, card, _), e = IntLit(card.bound, DEC, U).

	//// Base case
	EvDeclConcat(c, NIL) :- c = count({d | d is EventDecl}) + 2.

    //// Build event array in reverse order
	EvDeclConcat(m, arr) :- DeclId(d, m, cn), EvDeclConcat(m + 1, after), arr = out.Args(def, after), EvDecl2PayloadType(d, type), EvDecl2EvCard(d, card), 
	                        def = Init(
							   Args(Ident(cn),
							   Args(StringLit(d.name, NIL),
							   Args(card,
							   Args(type,
							   NIL))))).

	//// Define the halt event
	EvDeclConcat(1, arr) :- EvDeclConcat(2, after), arr = out.Args(def, after), TypeConstant(in.BaseType(ANY), typeId, _),
	                        def = Init(
							   Args(Ident("_P_EVENT_HALT"),
							   Args(StringLit("halt", NIL),
							   Args(IntLit(4294967295, DEC, U),
							   Args(Ident(strJoin("P_GEND_TYPE_", toString(typeId))),
							   NIL))))).

	//// Define the default event
	EvDeclConcat(0, arr) :- EvDeclConcat(1, after), arr = out.Args(def, after), TypeConstant(in.BaseType(NULL), typeId, _),
	                        def = Init(
							   Args(Ident("_P_EVENT_DEFAULT"),
							   Args(StringLit("default", NIL),
							   Args(IntLit(0, DEC, U),
							   Args(Ident(strJoin("P_GEND_TYPE_", toString(typeId))),
							   NIL))))).

    //// Emit the event decl array.
	HOut(2, def) :- EvDeclConcat(0, arr), 
	                def = out.VarDef(
							      NIL, 
								  ArrType(NmdType(NIL, "PRT_EVENTDECL"), NIL), 
								  "P_GEND_EVENTS", 
								  Init(arr)).

    /*************************************************************/
    /******            Generate Variable Decl Arrays        ******/
    /*************************************************************/	
	VarDeclConcat ::= (pos: Natural, mach: MachineDecl, arr: out.Args + {NIL}).

	//// Base case
	VarDeclConcat(c, m, NIL) :- m is MachineDecl, c = count({v | v is VarDecl, v.owner = m}).

    //// Build every variable array in reverse order
	VarDeclConcat(m, d.owner, arr) :- 
							DeclId(d, m, cvar), DeclId(d.owner, _, cmach), VarDeclConcat(m + 1, d.owner, after), d : VarDecl, TypeConstant(d.type, typeId, _),							  
							arr = out.Args(def, after), 
	                        def = Init(
							   Args(Ident(cmach),
							   Args(Ident(cvar),
							   Args(StringLit(d.name, NIL),
							   Args(Ident(strJoin("P_GEND_TYPE_", toString(typeId))),
							   NIL))))).

	HOut(3, def) :- VarDeclConcat(0, mach, arr),
	                def = out.VarDef(
							      NIL, 
								  ArrType(NmdType(NIL, "PRT_VARDECL"), NIL), 
								  strJoin("P_GEND_VARS_", mach.name), 
								  Init(arr)).

    /*************************************************************/
    /******          Generate Transition Decl Arrays        ******/
    /*************************************************************/	
	TransDeclConcat ::= (pos: Natural, context: StateDecl, arr: out.Args + {NIL}).
	TransDeclId     ::= (decl: TransDecl, id: Natural).
	TransDeclId(t, id) :- t is TransDecl, id = toOrdinal(t, 0, { t' | t' is TransDecl, t'.src = t.src }).

	//// Base case
	TransDeclConcat(c, s, NIL) :- s is StateDecl, c = count({t | t is TransDecl, t.src = s}).

    //// Build every transition list in reverse order
    /*
	TransDeclConcat(m, d.owner, arr) :- 
							TransDeclId(d, m, cvar), TransDeclConcat(m + 1, d.owner, after), 
							DeclId(d.src, _, srcname), DeclId(d.src.owner, _, machname), 
							sdst is StateDecl, sdst.owner = d.src.owner, sdst.name = d.dst							  
							arr = out.Args(def, after), 
	                        def = Init(
							   Args(Ident(cmach),
							   Args(Ident(cvar),
							   Args(StringLit(d.name, NIL),
							   Args(Ident(strJoin("P_GEND_TYPE_", toString(typeId))),
							   NIL))))).
*/
}	