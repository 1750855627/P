domain P
{        
    /*************************************************************/
    /****************          Type Language          ************/
    /*************************************************************/    
       
    //// The basic type id accepts any machine.
    BaseType        ::= new ({ NULL, BOOL, INT, EVENT, MACHINE, MODEL, FOREIGN, ANY }).
    TupType         ::= new (hd: any TypeExpr, tl: any TupType + { NIL }).
    NmdTupType      ::= new (hd: any NmdTupTypeField, tl: any NmdTupType + { NIL }).
    SeqType         ::= new (x: any TypeExpr).
    MapType         ::= new (k: any TypeExpr, v: any TypeExpr).
    NmdTupTypeField ::= new (name: any String, type: any TypeExpr). 
    TypeExpr        ::= BaseType + TupType + NmdTupType + SeqType + MapType.
        
    /*************************************************************/
    /****************          Action Language        ************/
    /*************************************************************/    
                               
    //// Expressions
    Name       ::= new (name: String).
    New        ::= new (name: String, arg: any Expr + { NIL }).
    FunApp     ::= new (name: String, args: any Exprs + { NIL }).
	NulApp     ::= new (op: Integer + Boolean + { THIS, TRIGGER, PAYLOAD, NONDET, FAIRNONDET, NULL, HALT }).
	UnApp      ::= new (op: { NOT, NEG, KEYS, VALUES, SIZEOF }, arg1: any Expr).
    BinApp     ::= new (op: { ADD, SUB, MUL, INTDIV, AND, OR, EQ, NEQ, LT, LE, GT, GE, IDX, IN }, arg1: any Expr, arg2: any Expr).
	Field      ::= new (arg: any Expr, name: String).
	Default    ::= new (type: any TypeExpr). 
	Cast       ::= new (arg: any Expr, type: any TypeExpr). 
    Tuple      ::= new (body: any Exprs).
    NamedTuple ::= new (body: any NamedExprs).
    Exprs      ::= new (head: any Expr, tail: any Exprs + { NIL }).              
    NamedExprs ::= new (field: String, exp: any Expr, tail: any NamedExprs + { NIL }).
    Expr       ::= Name + New + NulApp + UnApp + BinApp + FunApp + Cast + Field + Default + Tuple + NamedTuple.
    ExprsExt   ::= Expr + Exprs + NamedExprs.

    //// Statements
    Push     ::= new (name: any QualifiedName).
    NewStmt  ::= new (name: String, arg: any Expr + { NIL }).
    Raise    ::= new (ev: any Expr, arg: any Expr + { NIL }).
    Send     ::= new (dest: any Expr, ev: any Expr, arg: any Expr + { NIL }).
    Monitor  ::= new (name: String, ev: Expr, arg: Expr + { NIL }).
    FunStmt  ::= new (name: String, args: any Exprs + { NIL }).
	NulStmt  ::= new (op: { SKIP, POP }).
	UnStmt   ::= new (op: { ASSERT }, arg1: any Expr).
	BinStmt  ::= new (op: { REMOVE, ASSIGN }, arg1: any Expr, arg2: any Expr).
    Return   ::= new (expr: any Expr + { NIL }).
    While    ::= new (cond: any Expr, body: any Stmt).
    Ite      ::= new (cond: any Expr, true: any Stmt, false: any Stmt).
    Seq      ::= new (s1: any Stmt, s2: any Stmt).

	Stmt ::= NewStmt + FunStmt + NulStmt + UnStmt + BinStmt + Return + Send + Raise + While + Ite + Seq + Push + Monitor. 

    /*************************************************************/
    /****************  State Machine Declarations    *************/
    /*************************************************************/

    MachineDecl  ::= fun (name: String -> kind: { REAL, MODEL, MONITOR }, card: any QueueConstraint, start: QualifiedName, isMain: Boolean).
    EventDecl    ::= fun (name: String -> card: any QueueConstraint, type: any TypeExpr + { NIL }).    
    VarDecl      ::= fun (name: String, owner: MachineDecl -> type: any TypeExpr).
    FunDecl      ::= fun (name: String, owner: MachineDecl -> kind: { REAL, MODEL }, params: any NmdTupType + { NIL },  return: any TypeExpr + { NIL }, body: any Stmt).
    StateDecl    ::= fun (name: QualifiedName, owner: MachineDecl -> entryFun: any Stmt, exitFun: any Stmt, isStable: Boolean).
    TransDecl    ::= fun (src: StateDecl, trig: String + { DEFAULT, HALT } -> dst: any QualifiedName, action: any Stmt + { NIL, PUSH }).
	ActionDecl   ::= fun (src: StateDecl, trig: String + { HALT } -> action: String).
	DefIgnDecl   ::= fun (src: StateDecl, trig: String + { HALT } -> kind: { DEFER, IGNORE }).
	
    AssumeMaxInstances ::= new (bound: Natural).
    AssertMaxInstances ::= new (bound: Natural).
	QualifiedName      ::= new (name: String, qualifier: any QualifiedName + { NIL }).
	QueueConstraint    ::= AssumeMaxInstances + AssertMaxInstances + { NIL }.
	EventLabel         ::= String + { DEFAULT, HALT }.

    /*************************************************************/
    /****************          Annotations           *************/
    /*************************************************************/

	Annotation ::= new (ant: Annotable, key: String, value: any AnnotValue).
	Annotable  ::= MachineDecl + EventDecl + StateDecl + VarDecl + TransDecl + FunDecl + ActionDecl + DefIgnDecl + { NIL }.
	AnnotValue ::= Integer + String + Boolean + { NULL }.
}
