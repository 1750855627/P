delimiters "%", "%"
decl_(kind) ::= "decl_%kind%"
decltype(ty) ::= "%(decl_(ty.TypeKind))(ty)%"
decl_base(ty) ::= "%ty.TypeName%"
decl_sequence(ty) ::= "List<%decltype(ty.ElementType)%>"
decl_namedtuple(ty) ::= "%ty.TypeName%"

topLevel(pgm) ::= <<
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.PSharp;

namespace %pgm.Namespace%
{
    %pgm.Machines:machineDecl();separator="\n\n"%

    %pgm.Events:eventDecl();separator="\n\n"%
}
>>

eventDecl(evt) ::= <<
internal class %evt.Name% : Event
{
%if(evt.PayloadType)%
    public %decltype(evt.PayloadType)% Payload { get; set; }

%endif%
    public %evt.Name%(%if(evt.PayloadType)%%decltype(evt.PayloadType)% payload%endif%)
        : base(%evt.Assert%, %evt.Assume%)
    {
    %if(evt.PayloadType)%
        this.Payload = payload;
    %endif%
    }
}
>>

argumentList(types,names) ::= <%
%types,names:{t,n|%decltype(t)% %n%}; separator=", "%
%>

machineDecl(machine) ::= <<
internal class %machine.Name% : Machine
{
    %machine.States:stateDecl();separator="\n\n"%
}
>>

stateDecl(state) ::= <%
%if(state.IsStart)%
[Start]%\n%
%endif%
%if(state.IsHot)%
[Hot]%\n%
%elseif(state.IsCold)%
[Cold]%\n%
%endif%
%if(state.EntryFun)%
[OnEntry(nameof(%state.EntryFun%))]%\n%
%endif%
%if(state.ExitFun)%
[OnExit(nameof(%state.ExitFun%))]%\n%
%endif%
%if(state.IgnoredEvents)%
[IgnoreEvents(%state.IgnoredEvents:{evt|typeof(%evt%)};wrap,anchor,separator=", "%)]%\n%
%endif%
%if(state.DeferredEvents)%
[DeferEvents(%state.DeferredEvents:{evt|typeof(%evt%)};wrap,anchor,separator=", "%)]%\n%
%endif%
%state.Transitions:stateTransition();separator="\n"%
%if(state.Transitions)%%\n%%endif%
class %state.Name% : MachineState {}
%>

stateTransition(t) ::= <%
%if(t.Target)%
%if(t.IsPush)%
[OnEventPushState(typeof(%t.OnEvent%), typeof(%t.Target%))]
%else%
[OnEventGotoState(typeof(%t.OnEvent%), typeof(%t.Target%)%if(t.Function)%, nameof(%t.Function%)%endif%)]
%endif%
%else%
[OnEventDoAction(typeof(%t.OnEvent%), nameof(%t.Function%))]
%endif%
%>
