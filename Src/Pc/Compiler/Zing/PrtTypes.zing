enum PRT_TYPE_KIND
{
	PRT_KIND_ANY, 
	PRT_KIND_BOOL, 
	PRT_KIND_EVENT,  
	PRT_KIND_FORGN,	PRT_KIND_REAL,
	PRT_KIND_INTERFACE,
	PRT_KIND_INT, 
	PRT_KIND_MAP, 
	PRT_KIND_NMDTUP, 
	PRT_KIND_NULL,
	PRT_KIND_SEQ, 
	PRT_KIND_TUPLE
};

class PRT_FIELD_NAME {

};

array PRT_TYPE_ARRAY[] PRT_TYPE;
array PRT_FIELD_NAME_ARRAY[] PRT_FIELD_NAME;

class PRT_TYPE {
    PRT_TYPE_KIND typeKind;

    int arity;
    PRT_FIELD_NAME_ARRAY fieldNames;
    PRT_TYPE_ARRAY fieldTypes;

    PRT_TYPE innerType;
	SM_EVENT_SET interfaceSet;
	
    PRT_TYPE domType;
    PRT_TYPE codType;

    static PRT_TYPE BuildDefault(PRT_TYPE_KIND typeKind) {
        PRT_TYPE type;
		type = new PRT_TYPE;
		type.typeKind = typeKind;
		type.interfaceSet = new SM_EVENT_SET;
		type.arity = 0;
		type.fieldNames = null;
		type.fieldTypes = null;
		type.innerType = null;
		type.domType = null;
		type.codType = null;
		return type;
    }
	static void NoPrivateInterface(PRT_TYPE t, SM_EVENT_SET hp)
	{
		PRT_TYPE_KIND kind = t.typeKind;
		int i;
		if(
		kind == PRT_TYPE_KIND.PRT_KIND_BOOL ||
		kind == PRT_TYPE_KIND.PRT_KIND_EVENT ||
		kind == PRT_TYPE_KIND.PRT_KIND_REAL ||
		kind == PRT_TYPE_KIND.PRT_KIND_INT)
		{
			return;
		}
		
		if(kind == PRT_TYPE_KIND.PRT_KIND_SEQ)
		{
			NoPrivateInterface(t.innerType, hp);
		}
		if(kind == PRT_TYPE_KIND.PRT_KIND_TUPLE || kind == PRT_TYPE_KIND.PRT_KIND_NMDTUP)
		{
			i = 0;
			while (i < t.arity)
			{
 				NoPrivateInterface(t.fieldTypes[i], hp);
				i = i + 1;
			}
		}
		if (kind == PRT_TYPE_KIND.PRT_KIND_MAP)
		{
			NoPrivateInterface(t.domType, hp);
			NoPrivateInterface(t.codType, hp);
		}
		if(kind == PRT_TYPE_KIND.PRT_KIND_INTERFACE)
		{
			foreach(SM_EVENT e in t.interfaceSet)
			{
				if(e in hp)
				{
					trace("Payload type has an interface with hidden or private event.\n");
					trace("Private Event {0}", e.name);
					assert(false);
				}
			}
		}
		
	}
    static PRT_TYPE PrtMkPrimitiveType(PRT_TYPE_KIND primType) {
        PRT_TYPE type;
		type = BuildDefault(primType);
		return type;
    }

	static PRT_TYPE PrtMkInterfaceType(SM_EVENT_SET interfaceSet) {
		PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_INTERFACE);
		type.interfaceSet = interfaceSet;
		return type;
	}
	
    static PRT_TYPE PrtMkMapType(PRT_TYPE domType, PRT_TYPE codType) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_MAP);
		type.domType = domType;
		type.codType = codType;
		return type;
    }

    static PRT_TYPE PrtMkNmdTupType(int arity) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_NMDTUP);
		type.arity = arity;
		type.fieldNames = new PRT_FIELD_NAME_ARRAY[arity];
		type.fieldTypes = new PRT_TYPE_ARRAY[arity];
		return type;
    }

    static PRT_TYPE PrtMkSeqType(PRT_TYPE innerType) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_SEQ);
		type.innerType = innerType;
		return type;
    }

    static PRT_TYPE PrtMkTupType(int arity) {
        PRT_TYPE type;
		type = BuildDefault(PRT_TYPE_KIND.PRT_KIND_TUPLE);
		type.arity = arity;
		type.fieldTypes = new PRT_TYPE_ARRAY[arity];
		return type;
    }

    static void PrtSetFieldType(PRT_TYPE tupleType, int index, PRT_TYPE fieldType) {
        tupleType.fieldTypes[index] = fieldType;
    }

    static void PrtSetFieldName(PRT_TYPE tupleType, int index, PRT_FIELD_NAME fieldName) {
        tupleType.fieldNames[index] = fieldName;
    }
};
