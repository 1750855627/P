[
	parsers.DSL = '"Parser at ..\Tools\PCompiler\DSLParser.dll"',
	modules.PData = '"PData at ..\Libraries\Formula\PData.4ml"',
	parse_ActiveParser = "DSL"
]

model OSR of PData 
{
    eD0Entry is EventDecl("D0Entry", AssumeMaxInstances(1), NIL).
    eD0Exit is EventDecl("D0Exit", AssumeMaxInstances(1), NIL).
    eTimerFired is EventDecl("TimerFired", AssertMaxInstances(1), NIL).
    eSwitchStatusChange is EventDecl("SwitchStatusChange", AssumeMaxInstances(1), NIL).
    eTransferSuccess is EventDecl("TransferSuccess", AssumeMaxInstances(1), NIL).
    eTransferFailure is EventDecl("TransferFailure", AssumeMaxInstances(1), NIL).
    eStopTimer is EventDecl("StopTimer", AssumeMaxInstances(1), NIL).
    eUpdateBarGraphStateUsingControlTransfer is EventDecl("UpdateBarGraphStateUsingControlTransfer", AssumeMaxInstances(1), NIL).
    eSetLedStateToUnstableUsingControlTransfer is EventDecl("SetLedStateToUnstableUsingControlTransfer", AssumeMaxInstances(1), NIL).
    eStartDebounceTimer is EventDecl("StartDebounceTimer", AssumeMaxInstances(1), NIL).
    eSetLedStateToStableUsingControlTransfer is EventDecl("SetLedStateToStableUsingControlTransfer", AssumeMaxInstances(1), NIL).
    eStoppingSuccess is EventDecl("StoppingSuccess", AssertMaxInstances(1), NIL).
    eStoppingFailure is EventDecl("StoppingFailure", AssertMaxInstances(1), NIL).

    eOperationSuccess is EventDecl("OperationSuccess", AssertMaxInstances(1), NIL).
    eOperationFailure is EventDecl("OperationFailure", AssertMaxInstances(1), NIL).
    eTimerStopped is EventDecl("TimerStopped", AssertMaxInstances(1), NIL).
    eYes is EventDecl("Yes", AssertMaxInstances(1), NIL).
    eNo is EventDecl("No", AssertMaxInstances(1), NIL).
    eunit is EventDecl("unit", AssertMaxInstances(1), NIL).

    mDriver is MachineDecl("Driver", FALSE, NIL).
    es1Driver is EventSetDecl("E1", mDriver).
    es2Driver is EventSetDecl("E2", mDriver).
    es3Driver is EventSetDecl("E3", mDriver).
    InEventSet(es1Driver, eD0Entry).
    InEventSet(es1Driver, eD0Exit).
    InEventSet(es2Driver, eD0Entry).
	InEventSet(es2Driver, eD0Exit).
    InEventSet(es2Driver, eSwitchStatusChange).
    InEventSet(es2Driver, eTimerFired).
    InEventSet(es2Driver, eTimerStopped).
    InEventSet(es3Driver, eSwitchStatusChange).
    InEventSet(es3Driver, eTransferSuccess).
    InEventSet(es3Driver, eTransferFailure).
    InEventSet(es3Driver, eD0Entry).
    InEventSet(es3Driver, eD0Exit).

    es4Driver is EventSetDecl("E4", mDriver).
    InEventSet(es4Driver, eSwitchStatusChange).

    VarDecl("Timer", mDriver, ID, TRUE).
    VarDecl("LED", mDriver, ID, TRUE).
    VarDecl("Switch", mDriver, ID, TRUE).
    VarDecl("check", mDriver, BOOL, FALSE).

MachStart(mDriver, sInitDriver).

sInitDriver is StateDecl("Init", mDriver, 
       `{
       Timer = new Timer(Driver=THIS); 
       LED = new LED(Driver=THIS);
       Switch = new Switch(Driver=THIS); 
       raise(Events.unit);
       }`,
       es4Driver).

mDriver_Ignore is ActionDecl("Ignore", mDriver, `{ }`).

sDxDriver is StateDecl("Dx", mDriver, `{ }`, es4Driver).
Install(sDxDriver, eD0Exit, mDriver_Ignore).

sCompleteD0EntryDriver is StateDecl("CompleteD0Entry", mDriver, `{ CompleteDStateTransition(); raise(Events.OperationSuccess); }`, es4Driver).

sWaitingForSwitchStatusChangeDriver is StateDecl("WaitingForSwitchStatusChange", mDriver, `{ }`, NIL).
Install(sWaitingForSwitchStatusChangeDriver, eD0Entry, mDriver_Ignore).

sCompletingD0ExitDriver is StateDecl("CompletingD0Exit", mDriver, `{ CompleteDStateTransition(); raise(Events.OperationSuccess); }`, NIL).

FunDecl("StoreSwitchAndEnableSwitchStatusChange", mDriver, NIL, NIL, TRUE, `{ }`).
FunDecl("CheckIfSwitchStatusChanged", mDriver, NIL, BOOL, TRUE, 
				      `{ 
				      	 if (NONDET) 
					    return true;
					 else
					    return false;
					}`).
FunDecl("CompleteDStateTransition", mDriver, NIL, NIL, TRUE, `{ }`).
fUpdateBarGraphStateUsingControlTransfer is FunDecl("UpdateBarGraphStateUsingControlTransfer", mDriver, NIL, NIL, TRUE, `{ send(LED, Events.UpdateBarGraphStateUsingControlTransfer); }`).
fSetLedStateToStableUsingControlTransfer is FunDecl("SetLedStateToStableUsingControlTransfer", mDriver, NIL, NIL, TRUE, `{ send(LED, Events.SetLedStateToStableUsingControlTransfer); }`).
fSetLedStateToUnstableUsingControlTransfer is FunDecl("SetLedStateToUnstableUsingControlTransfer", mDriver, NIL, NIL, TRUE, `{ send(LED, Events.SetLedStateToUnstableUsingControlTransfer); }`).
FunDecl("StartDebounceTimer", mDriver, NIL, NIL, TRUE, `{ send(Timer, Events.StartDebounceTimer); }`).

sStoringSwitchAndCheckingIfStateChangedDriver is StateDecl("StoringSwitchAndCheckingIfStateChanged", mDriver,
	`{
		StoreSwitchAndEnableSwitchStatusChange();
		check = CheckIfSwitchStatusChanged();
		if (check) 
		     raise(Events.Yes);
		else 
		     raise(Events.No);
	}`,
	NIL).
Install(sStoringSwitchAndCheckingIfStateChangedDriver, eD0Entry, mDriver_Ignore).

sUpdatingBarGraphStateDriver is StateDecl("UpdatingBarGraphState", mDriver,
			     `{
				UpdateBarGraphStateUsingControlTransfer();
				}`,
				es2Driver).
Install(sUpdatingBarGraphStateDriver, eD0Entry, mDriver_Ignore).

sUpdatingLedStateToUnstableDriver is StateDecl("UpdatingLedStateToUnstable", mDriver,
			    `{ 
			       SetLedStateToUnstableUsingControlTransfer();
			       }`,
			       es2Driver).
Install(sUpdatingLedStateToUnstableDriver, eD0Entry, mDriver_Ignore).

sWaitingForTimerDriver is StateDecl("WaitingForTimer", mDriver, `{ StartDebounceTimer(); }`, NIL).
Install(sWaitingForTimerDriver, eD0Entry, mDriver_Ignore).

sUpdatingLedStateToStableDriver is StateDecl("UpdatingLedStateToStable", mDriver,
			  `{
				SetLedStateToStableUsingControlTransfer();
				}`,
				es2Driver).
Install(sUpdatingLedStateToStableDriver, eD0Entry, mDriver_Ignore).

//setting passive flag 
Flags(fSetLedStateToStableUsingControlTransfer, PASSIVE).
Flags(fUpdateBarGraphStateUsingControlTransfer, PASSIVE).
Flags(fSetLedStateToUnstableUsingControlTransfer, PASSIVE).

sStoppingTimerOnStatusChangeDriver is StateDecl("StoppingTimerOnStatusChange", mDriver, `{ raise(Events.unit); }`, es3Driver).
Install(sStoppingTimerOnStatusChangeDriver, eD0Entry, mDriver_Ignore).

sStoppingTimerOnD0ExitDriver is StateDecl("StoppingTimerOnD0Exit", mDriver, `{ raise(Events.unit); }`, es3Driver).
Install(sStoppingTimerOnD0ExitDriver, eD0Entry, mDriver_Ignore).

sStoppingTimerDriver is StateDecl("StoppingTimer", mDriver, `{ send(Timer, Events.StopTimer); }`, NIL).
Install(sStoppingTimerDriver, eD0Entry, mDriver_Ignore).

sWaitingForTimerToFlushDriver is StateDecl("WaitingForTimerToFlush", mDriver, `{ }`, es3Driver).
Install(sWaitingForTimerToFlushDriver, eD0Entry, mDriver_Ignore).

sReturningTimerStoppedDriver is StateDecl("ReturningTimerStopped", mDriver, `{ raise(Events.TimerStopped); }`, NIL).
Install(sReturningTimerStoppedDriver, eD0Entry, mDriver_Ignore).

TransDecl(sInitDriver, eunit, sDxDriver, FALSE).
TransDecl(sDxDriver, eD0Entry, sCompleteD0EntryDriver, FALSE).
TransDecl(sCompleteD0EntryDriver, eOperationSuccess, sWaitingForSwitchStatusChangeDriver, FALSE).
TransDecl(sWaitingForSwitchStatusChangeDriver, eD0Exit, sCompletingD0ExitDriver, FALSE).
TransDecl(sCompletingD0ExitDriver, eOperationSuccess, sDxDriver, FALSE).
TransDecl(sWaitingForSwitchStatusChangeDriver, eSwitchStatusChange, sStoringSwitchAndCheckingIfStateChangedDriver, FALSE).
TransDecl(sStoringSwitchAndCheckingIfStateChangedDriver, eYes, sUpdatingBarGraphStateDriver, FALSE).
TransDecl(sStoringSwitchAndCheckingIfStateChangedDriver, eNo, sWaitingForTimerDriver, FALSE).
TransDecl(sUpdatingBarGraphStateDriver, eTransferSuccess, sUpdatingLedStateToUnstableDriver, FALSE).
TransDecl(sUpdatingBarGraphStateDriver, eTransferFailure, sUpdatingLedStateToUnstableDriver, FALSE).
TransDecl(sUpdatingLedStateToUnstableDriver, eTransferSuccess, sWaitingForTimerDriver, FALSE).
TransDecl(sWaitingForTimerDriver, eTimerFired, sUpdatingLedStateToStableDriver, FALSE).
TransDecl(sUpdatingLedStateToStableDriver, eTransferSuccess, sWaitingForSwitchStatusChangeDriver, FALSE).
TransDecl(sWaitingForTimerDriver, eSwitchStatusChange, sStoppingTimerOnStatusChangeDriver, FALSE).
TransDecl(sStoppingTimerOnStatusChangeDriver, eTimerStopped, sStoringSwitchAndCheckingIfStateChangedDriver, FALSE).
TransDecl(sWaitingForTimerDriver, eD0Exit, sStoppingTimerOnD0ExitDriver, FALSE).
TransDecl(sStoppingTimerOnD0ExitDriver, eTimerStopped, sCompletingD0ExitDriver, FALSE).

TransDecl(sStoppingTimerDriver, eStoppingSuccess, sReturningTimerStoppedDriver, FALSE).
TransDecl(sStoppingTimerDriver, eStoppingFailure, sWaitingForTimerToFlushDriver, FALSE).
TransDecl(sStoppingTimerDriver, eTimerFired, sReturningTimerStoppedDriver, FALSE).
TransDecl(sWaitingForTimerToFlushDriver, eTimerFired, sReturningTimerStoppedDriver, FALSE).

TransDecl(sStoppingTimerOnStatusChangeDriver, eunit, sStoppingTimerDriver, TRUE).
TransDecl(sStoppingTimerOnD0ExitDriver, eunit, sStoppingTimerDriver, TRUE).


mUser is MachineDecl("User", TRUE, NIL).
VarDecl("Driver", mUser, ID, FALSE).

MachStart(mUser, sInitUser).

sInitUser is StateDecl("Init", mUser, `{ Driver = new Driver(); raise(Events.unit); }`, NIL).
sS0User is StateDecl("S0", mUser, `{ send(Driver, Events.D0Entry); raise(Events.unit); }`, NIL).
sS1User is StateDecl("S1", mUser, `{ send(Driver, Events.D0Exit); raise(Events.unit); }`, NIL).

TransDecl(sInitUser, eunit, sS0User, FALSE).
TransDecl(sS0User, eunit, sS1User, FALSE).
TransDecl(sS1User, eunit, sS0User, FALSE).

mSwitch is MachineDecl("Switch", TRUE, NIL).
VarDecl("Driver", mSwitch, ID, FALSE).

MachStart(mSwitch, sInitSwitch).

sInitSwitch is StateDecl("Init", mSwitch, `{ raise(Events.unit); }`, NIL).
sChangeSwitchStateSwitch is StateDecl("ChangeSwitchState", mSwitch, 
`{
send(Driver, Events.SwitchStatusChange);
raise(Events.unit);
}`,
NIL).

TransDecl(sInitSwitch, eunit, sChangeSwitchStateSwitch, FALSE).
TransDecl(sChangeSwitchStateSwitch, eunit, sChangeSwitchStateSwitch, FALSE).

mLED is MachineDecl("LED", TRUE, NIL).
VarDecl("Driver", mLED, ID, FALSE).

MachStart(mLED, sInitLED).

sInitLED is StateDecl("Init", mLED, `{ }`, NIL).
sProcessUpdateLED is StateDecl("ProcessUpdate", mLED, 
		  `{ 
		     if (NONDET) 
		     	send(Driver, Events.TransferFailure);
		     else 
		        send(Driver, Events.TransferSuccess);
		     raise(Events.unit);
		     }`,
		     NIL).

sUnstableLED is StateDecl("Unstable", mLED, `{ send(Driver, Events.TransferSuccess); }`, NIL).
sStableLED is StateDecl("Stable", mLED, `{ send(Driver, Events.TransferSuccess); raise(Events.unit); }`, NIL).

TransDecl(sInitLED, eUpdateBarGraphStateUsingControlTransfer, sProcessUpdateLED, FALSE).
TransDecl(sProcessUpdateLED, eunit, sInitLED, FALSE).
TransDecl(sInitLED, eSetLedStateToUnstableUsingControlTransfer, sUnstableLED, FALSE).
TransDecl(sInitLED, eSetLedStateToStableUsingControlTransfer, sStableLED, FALSE).
TransDecl(sUnstableLED, eSetLedStateToStableUsingControlTransfer, sInitLED, FALSE).
TransDecl(sUnstableLED, eUpdateBarGraphStateUsingControlTransfer, sProcessUpdateLED, FALSE).
TransDecl(sStableLED, eunit, sInitLED, FALSE).

mTimer is MachineDecl("Timer", TRUE, NIL).
VarDecl("Driver", mTimer, ID, FALSE).
es2Timer is EventSetDecl("es2", mTimer).
InEventSet(es2Timer, eStartDebounceTimer).

MachStart(mTimer, sInitTimer).

mTimer_Ignore is ActionDecl("Ignore", mTimer, `{ }`).

sInitTimer is StateDecl("Init", mTimer, `{ }`, NIL).
Install(sInitTimer, eStopTimer, mTimer_Ignore).

sTimerStartedTimer is StateDecl("TimerStarted", mTimer, `{ if (NONDET) raise(Events.unit); }`, es2Timer).
sSendTimerFiredTimer is StateDecl("SendTimerFired", mTimer, 
		     `{
			send(Driver, Events.TimerFired); 
			raise(Events.unit);
			}`,
			es2Timer).
sConsiderStoppingTimer is StateDecl("ConsiderStopping", mTimer, 
`{
if (NONDET) {
   send(Driver, Events.StoppingFailure);
   send(Driver, Events.TimerFired);
} else {
   send(Driver, Events.StoppingSuccess);
}
raise(Events.unit);
}`,
es2Timer).

TransDecl(sInitTimer, eStartDebounceTimer, sTimerStartedTimer, FALSE).
TransDecl(sTimerStartedTimer, eunit, sSendTimerFiredTimer, FALSE).
TransDecl(sSendTimerFiredTimer, eunit, sInitTimer, FALSE).
TransDecl(sTimerStartedTimer, eStopTimer,sConsiderStoppingTimer, FALSE).
TransDecl(sConsiderStoppingTimer, eunit, sInitTimer, FALSE).

  MainDecl(New(MachType("User"), NIL)).
}